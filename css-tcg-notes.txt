---------------------------------------------------------------------------------------------------
UDEMY CSS - THE COMPLETE GUIDE
---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
Setting up repo in Github
---------------------------------------------------------------------------------------------------

Created a new repo at htts://github.com

	- Chose not to create a Readme file
	- I will push my existing rpeo to this remote

Initialized my course directory and made my first commit:

	$ git init 
	$ git add .
	$ git commit -m "First commit"

Pushed my existing repository from the command line:

	$ git remote add origin git@github.com:goranbr/udemy-css-tcg.git
	$ git push -u origin master

---------------------------------------------------------------------------------------------------
SECTION 001 Getting Started
---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
Lecture 009 Recommended tools
---------------------------------------------------------------------------------------------------

- Visual Studio Code
	https://code.visualstudio.com/

- Chrome Browser
	# apt-get install chromium-browser

---------------------------------------------------------------------------------------------------
SECTION 002 Diving Into the Basics of CSS	
---------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------
Lecture 016 Applying Additional Styles & Importing Google Fonts
---------------------------------------------------------------------------------------------------

Importing Google fonts:
	- Google: "Google fonts"
	- Find a font that you like and read the instructions

In the html head section:
	<link href="https://fonts.googleapis.com/css?family=Anton" rel="stylesheet">
	
In the css rules:
	font-family: "Anton", sans-serif
	
	
---------------------------------------------------------------------------------------------------
Lecture 021 Theory Time - Combinators
---------------------------------------------------------------------------------------------------

Understanding Combinators

Adjacent sibling (+):
	- h2 + p { ... }
	- Element share the same parent
  - Second element follows immediately after first element
	
	Example:
	<h2>...</h2>
	<p>Applied here</p>
	
General sibling	(~):
	- h2 ~ p { ... }
	- Element share the same parent
	- Second element comes somewhere after first element

	Example:
	<h2>...</h2>
	<p>Applied here</p>
	<p>Applied here also</p>
	
Child (>):
	- div > p { ... }
	- Second element a direct child of the first
	
	Example:
		<div>Main text</div>
		<p>Applied here</p>
	
Descendant (space):
	- div  p { ... }
	- Second element is a descendant of the first
	
	Example:
		<div>Main text</div>
		<h1>My header</h1>
		<p>Applied here</p>
	
	
---------------------------------------------------------------------------------------------------
Lecture 022 Summarizing Properties & Selectors
---------------------------------------------------------------------------------------------------

Selectors, Properties and Values...

SELECTORS
---------------------------------------

- elements   : div
- classes    : .menu-titles
- id's       : #main-title
- attributes : [disabled]
- universal  : *

PROPERTIES
---------------------------------------

- background 
- width
- color
- margin
- display
- https://developer.mozilla.org/en-US/docs/Web/CSS/Reference

VALUES
---------------------------------------

Values are tightly coupled to each specific property:

Pre-defined options:
- display: block
- overflow: auto

Colors:
- red,#fa4545, #ccc

Length, sizes and numbers:
- 30%, px, 3

Functions:
- background: url(...);
- transform: scale(...);

---------------------------------------------------------------------------------------------------
SECTION 003 Diving Deeper into CSS
---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
Lecture 025 Module Introduction
---------------------------------------------------------------------------------------------------

In this module:

- The box module
- Height and width
- The display property
- "Properties worth to remember"
- Pseudo classes & elements

---------------------------------------------------------------------------------------------------
Lecture 028 Understanding Margin Collapsing and Removing Default Margins
---------------------------------------------------------------------------------------------------

Removing Default Margins:
	body { margin: 0px; }
	
Margin Collapsing:
- Two adjacent margins are collapsed by default
- The bigger margin defines the shared margin 
- https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing

---------------------------------------------------------------------------------------------------
Lecture 032 Diving Into the Height & Width Properties
---------------------------------------------------------------------------------------------------

- Block level elements always take up 100%  of the - available - width by default.

---------------------------------------------------------------------------------------------------
Lecture 033 Understanding Box Sizing
---------------------------------------------------------------------------------------------------

When we change an elements width and height - what are we really changing the size of, in terms
of its parts - content, padding, border, margin? 

This behaviour can be modified by using the property: box-sizing

By default: 

	- box-sizing: content-box 
	- Only the content is addressed by the value you specify
	- The browser then adds the padding, border and the margin.

Including the padding and border:

	- box-sizing: border-box
	- Here the width/height includes the padding and border
	- Not the margin though
		
To use this inclusive box as the default:
	
		* { box-sizing: border-box; }
		
---------------------------------------------------------------------------------------------------
Lecture 035 Understanding the Display Property
---------------------------------------------------------------------------------------------------		

The most common values for the display property is...

	block   - the element takes up the whole with, and its own row
	inline  - the element only takes up the minimum amount of space
	none    - the element is hidden, takes up no space, and is removed from the DOM

NB: To hide an element but keeps its space and its part of the DOM, use:
		visibility: hidden

But there is also a value called inline-block:
	- the element does not take up 100% horizontal space
	- you can use the box-model to modify padding, border, margin 
	
To create a nice horizontal top menu:
	- We can use an unordered list (ul)
	- We set the display property on the list items (li) to: display: inline-block

	<ul class="main-nav__items">
		<li class="main-nav__item"> <a href="packages/index.html">Packages</a> </li>
		...
		
	.main-nav__item {
			display: inline-block;
	}

BLOCK-LEVEL ELEMENTS 

- Rendered as a block and hence take up all the available horizontal space. 
- You can set margin-top and margin-bottom and two block-level elements will render in two different lines.
- Some examples are: <div> , <section> , <article> , <nav>  but also <h1> , <h2>  etc and <p> .

INLINE ELEMENTS 

- Only take up the space they require to fit their content in. 
- Two inline-elements will fit into the same line (as long as the combined content doesn't take up the entire space)
- They also use the box-model you learned about but margin-top  and margin-bottom  have no effect on the element. 
- Properties padding-top  and padding-bottom have a different effect. 
- They don't push the adjacent content away but they will do so with the element border. 
- Setting a width  or height  on an inline element also has no effect. 
- Some example elements are: <a> , <span> , <img> 
- More about this: https://hacks.mozilla.org/2015/03/understanding-inline-box-model/

INLINE BLOCK ELEMENTS

- If you want to do so or need both block-level and inline behavior, you can set display: inline-block


---------------------------------------------------------------------------------------------------
Lecture 043 Theory Time - Pseudo Classes & Pseudo Elements
---------------------------------------------------------------------------------------------------

PSEUDO CLASSES 

	Defines the style for a special state of an element:
	:class_name
	
	More: https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
	
	
PSEUDO ELEMENTS:

	Defines the style for a special part  of an element:
	::element_name

	More: https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements
	
	Example: mark up the first letter in a paragraph:
	
	p::first-letter {
			color: red;
			font-size: 20px;
	}

	Example: Add and style added content after the main content of an element:
	
	.main-nav__item a::after {
			content: " (Link)";
			color: red;
	}

---------------------------------------------------------------------------------------------------
Lecture 044 Grouping Rules
---------------------------------------------------------------------------------------------------

You can group several rules together with a comma - if the selectors should have the same style:

From:

	.main-nav__item a:hover  { color: white; }
	.main-nav__item a:active { color: white; }

To:

	.main-nav__item a:hover,
	.main-nav__item a:active 
	{
		color: white; 
	}

	
---------------------------------------------------------------------------------------------------
Lecture 046 Adding & Styling a CTA-Button
---------------------------------------------------------------------------------------------------

We want to add some extra style to the "Start hosting" link.
It's what is called a CTA link - Call to Action - a link we want to emphasize.

We will add an extra class to that element:

	<li class="main-nav__item main-nav__item--cta">
	
NB:

	The authors of the course use a method of naming classes called BEM:
	Block Element Modifyers
	
	Given our name above, main-nav__item--cta:
	main-nav = is a block    (Standalone entity that is meaningful on its own)
	__item   = is an element (A part of a block that has no standalone meaning, and is semantically tied to its block)
	--cta"   = is a modifier (A flag on a block or element. Use them to change appearance or behavior)

	More on that:
	- https://en.bem.info/methodology/
	- http://getbem.com/introduction/
	- https://css-tricks.com/bem-101/
	- https://www.smashingmagazine.com/2018/06/bem-for-beginners/
	
		
	So we add "--cta" to style a modificiation to the normal "main-nav__item" elements.

And add this extra css for that class:

	First the inactive state:
	.main-nav__item--cta a {
			color: white;
			background: #ff1b68;
			padding: 8px 16px;
			border-radius: 8px;
	}

	When hovering, we'll remove the border, and invert the colors of text and background:
	.main-nav__item--cta a:hover,
	.main-nav__item--cta a:active {
			color: #ff1b68;
			background: white;
			border: none;
	}

---------------------------------------------------------------------------------------------------
Lecture 047 Adding a Background Image to our Project
---------------------------------------------------------------------------------------------------	

We'll replace the red background with a picture for the product overview part of our webpage:

	#product-overview { 
     /*background: #ff1b68; */
     background: url("freedom.jpg");
     width: 100%;
     height: 528px;
     padding: 16px;

}

---------------------------------------------------------------------------------------------------
Lecture 049 Wrap Up
---------------------------------------------------------------------------------------------------	


Both block and inline elements conform to the box model
- With the exception that inline elements ignore margin-top and margin bottom properties.
- https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model

When you use width and height properties there are two ways to count
- content-box - the sizes you speficy make up the content measurements only
- border-box - the sizes you speficy make up content+padding+border measurements as a whole

- https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing
- https://www.w3schools.com/css/css_dimension.asp

With the diplay property with can specify an element to conform to being
- inline
- block
- inline-block  (element does not get a row of its own)
- none          (elemt removed from the documnet flow and what you see, not the DOM)

- https://developer.mozilla.org/en-US/docs/Web/CSS/display


---------------------------------------------------------------------------------------------------
SECTION 004 More on Selectors & CSS Features
---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
Lecture 052 Using Multiple CSS Classes & Combined Selectors
---------------------------------------------------------------------------------------------------	

Emphasis:

- You can use multiple classes on one element

- And if you do - and the css for those classes apply styling for the same property, 
  then the normal rules for specificity and order rule applies.

---------------------------------------------------------------------------------------------------
Lecture 053 Classes or IDs?
---------------------------------------------------------------------------------------------------	 

CSS Class Selectors
- Reusable
- Allow you to mark and name things for styling purposes only
- It's rately wrong to use a class
- Should normally be your selector of choice

CSS ID Selectors
- Only used once per page
- Also has a non-css meaning (e.g. page link): 

	<a href="#intro" class="active">Intro</a>  --->  <section id="intro" class="main-section">
	
- Can be used if already present
- Don't use them just to add some ccs styling

---------------------------------------------------------------------------------------------------
Lecture 054 (Not) using !important
---------------------------------------------------------------------------------------------------

Example:

	div {
		color: red !important;
	}
	
What does "!important" do?
- It overrides specificity and all other selectors

SO--- RARELY IF EVER USE IT!

---------------------------------------------------------------------------------------------------
Lecture 055 Selecting the Opposite with :not()
---------------------------------------------------------------------------------------------------

The :not() pseudo class:

Examples:

	/* selects any el that is not a paragraph */
	:not(p) {
		color: blue;
	}

	/* selects any anchor that is of class "active" */
	a:not(.active) {
    color: blue;
}
	
- Use this pseudo clas with caution	
- Better to use "positive" selectors than "negating".

---------------------------------------------------------------------------------------------------
Lecture 056 CSS & Browser Support
---------------------------------------------------------------------------------------------------

There is a very good web page to tell you which browsers support a certain feature of css:
- https://caniuse.com/

---------------------------------------------------------------------------------------------------
Lecture 058 Useful Resources & Links
---------------------------------------------------------------------------------------------------


A discussion on "classes vs IDs": 
https://stackoverflow.com/questions/12889362/difference-between-id-and-class-in-css-and-when-to-use-it

When is using !important  okay?
https://css-tricks.com/when-using-important-is-the-right-choice/

The :not()  pseudo class:
https://developer.mozilla.org/en-US/docs/Web/CSS/:not

Can I Use (a certain feature on a specific browser)?:
https://caniuse.com/


---------------------------------------------------------------------------------------------------
SECTION 005 Practicing the Basics
---------------------------------------------------------------------------------------------------    

---------------------------------------------------------------------------------------------------
Lecture 061 Working on the recommended plan
---------------------------------------------------------------------------------------------------

We add a class for state of the recommended plan - highlighted:
<article class="plan plan--highlighted">

And a class for the part of the plan that is the header (h1) text:
<h1 class="plan__annotation">RECOMMENDED</h1>

Then we use css to give the recommended plan..
- White text, green background, and a gray transparent drop shadow of 2px

	.plan--highlighted {
			background: #19b84c;
			color: white;
			box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.5);

	}
	
---------------------------------------------------------------------------------------------------
Lecture 062 Styling the Badge with "border-radius"
---------------------------------------------------------------------------------------------------

Finishing off the recommended header, we'll..
- make the text green
- its background white
- add more padding
- add a drop shadow

	.plan__annotation {
			background: white;
			color: #19b84c;
			padding: 8px;
			box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.5);
	}

Then we want to round off the corners on the recommended header...
- So we add -- border-radius: 8px;

	.plan__annotation {
			background: white;
			color: #19b84c;
			padding: 8px;
			box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.5);
			border-radius: 8px;
	}

---------------------------------------------------------------------------------------------------
Lecture 063 Styling our List
---------------------------------------------------------------------------------------------------

We want to remove the bullets on our list...

We add a new class to the ul elements:

	<ul class="plan__features">
	<li>1 Workspace</li>
	<li>Unlimited Traffic</li>
	<li>10GB Storage</li>
	<li>Basic Support</li>
	/ul>

We also want to give each list item some vertical space:	
	
We could then style that thus:

	.plan__features {
			list-style: none;
			padding: 0;
	}	

But in keeping with our BEM method, we'll add yet another class for those elements:

	<ul class="plan__features">
		<li class="plan__feature">5 Workspaces</li>
		<li class="plan__feature">Unlimited Traffic</li>
		<li class="plan__feature">100GB Storage</li>
		<li class="plan__feature">Plus Support</li>
	</ul>
	
And style them thus:



---------------------------------------------------------------------------------------------------
Lecture 064 Working on the Title and the Price of our Packages
---------------------------------------------------------------------------------------------------

We want to add some styling to the name and price of the plans too:

In the html:

	<article class="plan">
	<h1 class="plan__title">FREE</h1>
	<h2 class="plan__price">$0/month</h2>
	...
	
And style those thus:

	.plan__title {
			color: #0e4f1f;
	}

	.plan__price {
			color: #ddd;
	}


And for the recommended plan name and price...

	.plan--highlighted .plan__title {
			color: white;
	}

	.plan--highlighted .plan__price {
			color: #0e4f1f;
	}

---------------------------------------------------------------------------------------------------
Lecture 065 Improving our Action Button
---------------------------------------------------------------------------------------------------

Let's style the page buttons...

Let's add a class for generic buttons first:

	<div>
		<button>CHOOSE PLAN</button>
	</div>

	<div>
		<button class="button">CHOOSE PLAN</button>
	</div>

And this css:

	.button {
			background: #0e4f1f;
			color: white;
	}

The button look a bit weird though...

	- It takes some of its style from the browser defaults - which overrides inherited styling
	- Let's make sure the font is inherited from our own css stylesheet
	- And make the button text bold

	.button {
			background: #0e4f1f;
			color: white;
			font: inherit       <---- thus!
			font-weight: bold;  <---- thus!
	}

And then we override the border (which will not bee seen until we hover over it):
	border: 1.5px solid #0e4f1f;
	
And change the padding:
	padding: 8px;

So we have...

	.button {
			background: #0e4f1f;
			color: white;
			font: inherit;
			border: 2px solid #0e4f1f;
			padding: 8px;
			border-radius: 8px;
	}	
	
However, when we hove can't see it's a button you can click. Let's change that:
	cursor: pointer;
	
Also when we hover we will change the styling by reversing the colors, thus:
	
	.button:hover, .button:active {
			background: white;
			color: #0e4f1f;

	}	
	
---------------------------------------------------------------------------------------------------
Lecture 066 Understanding Outlines
---------------------------------------------------------------------------------------------------	
	
On some browsers, like chrome, we can see an outline around the button signifying the
part of the web page that has the focus. Input fields also have this quality.

On chrome we want to remove this outline for the button, which looks ugly:

The outline shown by some browsers is not part of the box model, as such, but shown
outside the border of an element, and inside the margin.

We need to use the focus pseudo selector for this:
	.button:focus {
		outline: none;
	}

---------------------------------------------------------------------------------------------------
Lecture 067 Presenting the Core Features to the User
---------------------------------------------------------------------------------------------------		

Here we add another sction to our html:

        <section>
            <h1>Many Good Reasons to Stick Around</h1>
            <ul>
                <li>
                    <div>

                    </div>
                    <p>3,857,000 Trusting Customers</p>
                </li>
                <li>
                    <div>

                    </div>
                    <p>99.999% Uptime Guarantee</p>
                </li>
                <li>
                    <div>

                    </div>
                    <p>Lightning Fast CDN</p>
                </li>
            </ul>
        </section>
        
       
---------------------------------------------------------------------------------------------------
Lecture 068 Styling the Headline of the Core Features Section
---------------------------------------------------------------------------------------------------		 

We'll style the header of this html like the header for our plans...

The good thing here is - we can reuse the section-title class:

	<h1 class="section-title">Many Good Reasons to Stick Around</h1>

	Voilá! - markup reuse!

Then let's style the boring list...

First, let's give this seection an id - key-features - so we have...

	<section id="key-features">
	<h1 class="section-title">Many Good Reasons to Stick Around</h1>
	...
	
Let's style that:

	Background for the section:
	
	#key-features {
    background: #ff1b68;
    margin-top: 80px;
	}

	Let's make the header text white:
	
	#key-features .section-title {
			color: white;
			margin: 32px;
}

---------------------------------------------------------------------------------------------------
Lecture 069 Preparing the Content of the Key Feature Area
---------------------------------------------------------------------------------------------------

Let's also style the list of features:

We end up with this code:

	<section id="key-features">
	<h1 class="section-title">Many Good Reasons to Stick Around</h1>
	<ul class="key-features__list">  <--new class - a part of the key-features element!
	<li class="key-feature">         <--new class - a key-feature (singular) by definition
	<div></div>
	<p class="key-feature__description">3,857,000...</p>  <--new class - part of key-feature
	</li>
	...
	
And then style thus:

	.key-features__list {
			list-style: none;             - No bullet points
			margin: 0;  
			padding: 0;
	}

	.key-feature {
			display: inline-block;       - Align list items horizontally
			width: 30%;                  - Create a 3-column look
			text-align: center;          - Center the three items
	}

	.key-feature__description {      - Style for the p elements making up key-features
			text-align: center;
			font-weight: bold;
			color: white;
			font-size: 20px;
			vertical-align: top;         - Make thing look better in smaller displays
	}

We are then going to add an image for each feature item:

We create another class ""key-feature__image" whichis a part of each list item:

	<li class="key-feature">
		<div class="key-feature__image"></div>
		<p class="key-feature__description">3,857,000 Trusting Customers</p>
	</li>
	
We then create a filled pink circle using css:

	.key-feature__image {
			background: #ffcede;          - background filling for our circle
			width: 128px;                 - width = height for fully circular image
			height: 128px; 
			border: 2px solid #424242;
			border-radius: 50%;           - styles our div elements to be circular
	}

This puts the circles in a row above the features list:
	O        O         O
	  xxxx     xxxx    xxxxxx
	  
We need to center the circles:
	margin: auto;   
	
	This fills out the epty space on each side of the divs to center the circles horizontally
	
And we get:
      O         O        O
    xxxxx     xxxxx    xxxxx


---------------------------------------------------------------------------------------------------
Lecture 070 Adding the Footer
---------------------------------------------------------------------------------------------------	

We add a footer to our html - after the <main> part and before the body:

And we add a new class:

    </main>
    <footer class="main-footer">      <---- here!
        <nav>
            <ul>
                <li>
                    <a href="#">Support</a>
                </li>
                <li>
                    <a href="#">Terms of Use</a>
                </li>
            </ul>
        </nav>
    </footer>
</body>

We style it like:

	.main-footer {
			background: black;
			padding: 32px;
			margin-top: 48px;
	}

And then the li elements and anchors inside them:

	.main-footer__links {
			list-style: none;
			margin: 0;
			padding: 0;
			text-align: center;
	}

	.main-footer__link {
			display: inline-block;      - List them horizontally
			margin: 0 16px;             - We can only influence side margins
	}

	.main-footer__link a {         - Style the links - normal state
			color: white;
			text-decoration: none;
	}

	.main-footer__link a:hover,    - Style the links - when hovering or clicking
	.main-footer__link a:active {
			color: #ccc;
	}

---------------------------------------------------------------------------------------------------
Lecture 072 Adding the Packages Page
---------------------------------------------------------------------------------------------------		

We add a packages folder with an index.html file and a new css file:

	packages/index.html
	packages/packages.html
	
We copy the former html file...

	- but remove the main part...
	- and keep the header and footer.
  - and change the inter-site links from:

From:
  <a href="index.html" class="main-header__brand">
	<a href="packages/index.html">Packages</a>
	<a href="customers/index.html">Customers</a>
	<a href="start-hosting/index.html">Start Hosting</a>  
 
To:  
	<a href="../index.html" class="main-header__brand">
	<a href="index.html">Packages</a>
	<a href="../customers/index.html">Customers</a>
	<a href="../start-hosting/index.html">Start Hosting</a>

We'll also factor out css from main.css that should be shared between pages into a "shared.css" file:                    

- Factor out the *, body, the header, footer and button css code.

- We add the shared css to hte main page so we don't loose our shared styling, so we get:

    <link rel="stylesheet"    href="shared.css">    
    <link rel="stylesheet"    href="main.css">
    
- Note we put the shared above the main.css:
  -- main.css may need to override the shared styles.
  -- order matters!
  
In the 	packages/packages.html we put:

    <link rel="stylesheet"    href="../shared.css">    - Shared
    <link rel="stylesheet"    href="packages.css">     - Specific styling


---------------------------------------------------------------------------------------------------
Lecture 074 Styling the Links
---------------------------------------------------------------------------------------------------		

We have added some content to the main element of the packages page:

    <main>
        <section>
            <a href="#">
            <h1>Our PLUS Plan</h1>
            <h2>The most popular choice of our customers.</h2>
            <p>Benefit from increased storage and faster support to ensure that your mission-critical data and applications are always available!</p>
            </a>
        </section>
        <section>
            <a href="#">
            <h1>Our FREE Plan</h1>
            <h2>An extremely solid start into our hosting world.</h2>
            <p>Get started immediately at zero cost!</p>
            </a>
        </section>
        <section>
            <a href="#">
            <h1>Our PREMIUM Plan</h1>
            <h2>All your enterprise needs. Instant support, guaranteed uptime. </h2>
            <p>The best solution for small to large enterprises. Because hosting shouldn't be in the way!</p>
            </a>
        </section>
    </main>

    
We start by pushing down the main contents with this css:

	main {
			margin-top: 32px;;
	}
    
We also add a class to our section's, each of which denotes a package:

	<section class="package">
	
And we add som e more styling:

main {
    margin-top: 32px;;
}

	.package {
			width: 80%;                  - Plans cover 80% of the page
			margin: 16px 0;
			border: 4px solid green;
			border-left: none;           - The plans sticks out from the left side
	}

We then style links like:

	.package a {
			text-decoration: none;      - No underline or such struff
			color: inherit;
			display: block              - Make link extend the whole width of containing div
			padding: 32px;
	}

NB: the link (a) element contains h1 and h2 elements as well as a paragraph (p) element:

	<section class="package">
		<a href="#">
		<h1>Our PLUS Plan</h1>
		<h2>The most popular choice of our customers.</h2>
		<p>Benefit from increased storage and faster support to ensure that your
				mission-critical data and applications are always available!</p>
		</a>
	</section>

---------------------------------------------------------------------------------------------------
Lecture 075 Styling our Package Boxes
---------------------------------------------------------------------------------------------------	

We add some more classes to the part of the package sections:

	<section class="package">
		<a href="#">
		<h1 class="package__title">Our PLUS Plan</h1>
		<h2 class="package__subtitle"> The most popular choice of our customers.</h2>
		<p  class="package__info">Benefit....</p>
		</a>
	</section>

And style some more:

	.package__subtitle {
			color: #979797;
	}

	.package__info {
			padding: 16px;
			border: 1px solid #0e4f1f;
			font-size: 20px;
			color: #0e4f1f;
	}

Then we add id to the package sections, because they will get individual backgrounds:

	<section class="package" id="plus"> ...
	<section class="package" id="free"> ...
	<section class="package" class="premium"> ...
	
And yet more styling for the various packages:

	#plus {
			background: rgba(213, 255, 220, 0.95);
	}

	#free {
			background: rgba(234, 252, 237, 0.95);
	}

	#premium {
			background: rgba(14, 75, 30, 0.95);
	}

	#premium .package__title {
			color: white;
	}

	#premium .package__subtitle {
			color:#bbb;
	}

We'll also add effects when hovering over a package section:

	NB: You can apply hover effect on more than links elements!

	.package:hover,
	.package:active {
			box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
			border-color: #ff5454;
	}
	
        
---------------------------------------------------------------------------------------------------
Lecture 076 Adding "float" to our Package
---------------------------------------------------------------------------------------------------

We want to push the "free plan" section to ther right margin...

Actually, we can not use:
	text-align: right;
	
	This property only works with inline elements.

If we just add this - old-school floating style - to our #free section...
	float: right; 
	
	...inline element will float around it, but other block elements won't.
	
If really want to use this old-school property, we can use a "kludge":

	1. Add a div after the floated element:
		 <div class="clearfix"></div>
		 
	2. Apply CSS:  
		.clearfix { clear: both; }
		
		This makes element after the div behave normally, i.e. not flow around floated elements.
	
REMEMBER 
	
NB: The property "text-align" only works with inline elements
	
NB: Using floating for determinining the position of block elements relative to other block elements  has largely been replaced by new techniques such as FlexBox and CSS Grid.

NB: Floating is still used when controlling the flow of inline elements, such as text, around block elements, such as images.
	
Also, the floated "free" section now has no border on the left, hanging in the middle of the
page so we have to correct that, and the text-alignment:

	#free {
			background: rgba(234, 252, 237, 0.95);
			float: right;
			border-right: none;                <-- here
			border-left: 4px solid #0e4f1f;    <-- here
			text-align: right;                 <-- here
	}


---------------------------------------------------------------------------------------------------
Lecture 077 Fixing the Hover Effect
---------------------------------------------------------------------------------------------------

We have a small problem when we hover over the free section though:
The left border does not border follow the red styling we gave it earlier.
	
The #free id selector has a higher specificity than class or pesudo selectors,
such as our our ".package:hover" selector.

	#free {
		...
		border-left: 4px solid #0e4f1f;
	}

	Versus:
	
	.package:hover,
	.package:active {
		box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
		border-color: #ff5454;
	}

A clean fix would be to add:

	#free:hover,
	#free:active {
			border-color: #ff5454;
	}
	
A less clean way - which should be used sparingly - if at all - would be to
add "!important" to the previous hover style:	

	.package:hover,
	.package:active {
			box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
			border-color: #ff5454 !important;
	}

More on floating:
- https://developer.mozilla.org/en-US/docs/Web/CSS/float

---------------------------------------------------------------------------------------------------
Lecture 078 Adding the Final Touches
---------------------------------------------------------------------------------------------------	
	
Looking at the main page again we have some elemtns that our not centered.

The plans as a group are not centered on the page, so we fix that:

  <section id="plans">
  <h1 class="section-title">Select your plan!</h1>
  <div class="plans__list">                           <--- new class!

And:

	.plans__list {
			width: 80%;
			margin: auto;            <--- Center the whole div  (a block element)
			text-align: center;      <--- Center elements inside the div (block-inlne elements)
	}
            
---------------------------------------------------------------------------------------------------
SECTION 006 Positioning elements with CSS
---------------------------------------------------------------------------------------------------             

---------------------------------------------------------------------------------------------------
Lecture 080 Module Introduction
---------------------------------------------------------------------------------------------------
          
- Understanding the "position" property
- How to create fixed navigation bars with "fixed" value
- Positioning elements with z-index
- Using "absolute" and "relative" values stand-alone and combined
- "Sticky" positioning
- The "stacking context"

---------------------------------------------------------------------------------------------------
Lecture 081 Why Positioning will Improve our Website
---------------------------------------------------------------------------------------------------

Just a preview of what we will do in this section...

---------------------------------------------------------------------------------------------------
Lecture 082. Understanding Positioning - The Theory
---------------------------------------------------------------------------------------------------

Given a web page which look basically like this...

<html>              |    Document flow
	<body>            |
		<div></div      |
		<div></div      V
		<div></div
	</body>
</html>

What govern the flow of how these elements are displayed?

A default value for the "display" property  = block

A default value for the "position" property = static
Other values are:

	-  absolute  (= relative to "viewport" = visible part of the webpage)
	-  relative  (to some element)
	-  fixed 
	-  sticky
  
Concepts:

Document flow properties: 
	top, bottom, left, right

	NB: You will only see a change if the property position is other than static.
	
Position property contexts:
	viewport
	<html>
	<body>
	parent element
	
	
---------------------------------------------------------------------------------------------------
Lecture 083 Working with the "fixed" Value
---------------------------------------------------------------------------------------------------

We have a small html code here to learn about positioning:

	<!DOCTYPE html>
	<html lang="en">
			<head>
					<meta charset="UTF-8">
					<meta http-equiv="X-UA-Compatible" content="ie=edge">
					<link rel="stylesheet" href="main.css">
					<title>Position</title>
			</head>
			<body>
					<div class="parent">
							<div class="child-1">Navigation Bar</div>
							<div class="child-2">Background Image</div>
							<div class="child-3">Features</div>
					</div>
			</body>
	</html>


We have some css already to understand where these elements begin, end.

Then, we try changing the position of the first inner div:

	.parent .child-1 {
		top: 100px;
	}

The above makes no change at all. Why?

NB: Document flow properties (top, bottom, left, right) only affects elements with a property position other than "static".

If we change to:

	.parent .child-1 {
		position: fixed;
	}

	Notice:
	
	1) The 1st div shrinks in size to only contain the actual text
	
	2) The 1st div is taken out of the document flow: 
	
			- It's is fixed in place in its original position
			- The 2nd div moves up in the page as if the first div wasn't there.
     
  3) The fiv is shown above the second div.
  
	
If we add:

	.parent .child-1 {
		position: fixed;
		width: 400px;
		margin: 0;      <--- this
		top: 0;         <--- this
	}

	The div is moved up to the top edge of the browser viewport 
	- BUT in its original horizontal postion.
	

And if we change that to:
	bottom:0;

	The div is moved down to the bottom edge of the browser viewport
	- BUT in its original horizontal postion.
	
If we change that to:
	left:0;
	
	The div is moved to the left edge of the browser viewport
	- BUT in its original vertical postion.
	
Now, if we combine top and left properties...
	top: 0;
	left: 0;
	
	The div is moved to the left upper edge of the browser viewport

Using this last setting and change the width to 100%...

	.parent .child-1 {
		position: fixed;
		width: 100%;
		margin: 0;
		top: 0;
		left: 0;
	}		
		
We get a full width nav bar fixed at the top...

BUt there's a problem - the right border of the nav bar is out of the viewport!

We fix that with:
	box-sizing: border-box;
	
So far we have tried out the postioning properties with box elements.
What would happen if we made our nav bar inline?

It would still work basically the same way - position-wise.

---------------------------------------------------------------------------------------------------
Lecture 084 Creating a Fixed Navigation Bar
---------------------------------------------------------------------------------------------------

IF we go back to the main web page of our project and do this:

	.main-header {
			background: #2ddf5c;
			padding: 8px 16px;
			width: 100%;
			position: fixed;      <---- here
}

The nav bar is now fixed - but the contents below moves up under it.
- Due to it being moved out of the document flow.

If the nav bar was not already positioned at the top left, we might have included:

	top: 0;
	left: 0;

	And we can do that anyway.
	
--------------------------------------------------------------------------------------------------
Lecture 085 Using "position" to Add a Background Image
---------------------------------------------------------------------------------------------------

We'll add a div and a new class in our packages html:

<body>
    <div class="background"></div>
    ...
    
A new subfolder in the shared main folder:
	../images
	
And a new image in that:
	../images/plans-background.jpg
	
If we then try to style the div with class "background":

	.background {
			background: url("../images/plans-background.jpg");
			width: 100%;
			height: 100%;
	}

	This does not work at all. So we try:
	
	.background {
			background: url("../images/plans-background.jpg");
			width: 500px;
			height: 500px;
	}	

	This creates a div with a background, vertically above our first plan "box".	So we add:
	position: fixed;
	
	Now the picture is superimposed on top of the plan divs which is below it in the document flow.
	It has been take out of the flow itself, so hte others mov up and takes its place.
	
	It is superimposed above the elements coming below in the document flow, because it comes 
	before them in the html file.
	
	We restore the width and height to 100%:
	
	background {
			background: url("../images/plans-background.jpg");
			width: 100%;
			height: 100%;
			position: fixed;
	}

	The background now actually covers all other content, but it is shown in its original size
	and is cropped of by the viewport of the browser when we make the window smaller.
	
--------------------------------------------------------------------------------------------------
Lecture 086 Understanding the Z-Index
---------------------------------------------------------------------------------------------------	
	
So far we have moved elements around on the x and y axis, i.e. left-and-right and up.and-down.
To make this background image appear below the content on the z-axis, i.e. make it have their
normal position of a background image, we need a new propery: z-index

The z-index property:
	- Default value: auto | 0
	- Only applies to elements with a position property != static
	
To place an element above another element with a default z-index:
	- Give it a higher, positive value
	
To place an element below another element with a default z-index:
	- Give it a lower, negative value
	
If two elements has the same value, the one that comes before the other in the hmtl file
covers the other.
	
The background has the position property so let's give it:
	z-index: -1;
	
--------------------------------------------------------------------------------------------------
Lecture 088 Styling & Positioning our Badge with "absolute" and "relative"
---------------------------------------------------------------------------------------------------		

Let's add a h2 element to our PLus package to be obvious about which is recommended:

	<a href="#">
	<h1 class="package__title">Our PLUS Plan</h1>
	<h2 class="package__badge">RECOMMENDED</h2>       <--- here!
	<h2 class="package__subtitle"> The most popular choice of our customers.</h2>
	<p  class="package__info">Benefit from increased storage...</p>
	</a>

We want to move it to hte right upper corner... 

But we can not use "position: fixed" now,
	we don't want to position it relative to the viewport edges.
	we want to position it relative to the parent element, and its upper right corner

If we use "position: absolut"...
	The left, right, top, bottom properties are applied relative to a parent element with
	a position property applied, or if none has that, the html element.
	
So we add this to the parent element - our plan div:

	.package {
			width: 80%;
			margin: 16px 0;
			border: 4px solid green;
			border-left: none;
			position: relative;        <--- here
	}

NB: position: relative

    The element is positioned according to the normal flow of the document, and then offset relative
    to itself based on the values of top, right, bottom, and left. The offset does not affect the 
    position of any other elements;
    
And then use position: absolute for our badge inside it:

	.package__badge {
			position: absolute;        <--- here
			top: 0;
			left: 400px;
			margin: 20px;
			font-size: 12px;
			color: white;
			background: #ff5454;
	}

NB: position: absolute

	  The element is removed from the normal document flow, and no space is created for the element in 
	  the page layout. It is positioned relative to its closest positioned ancestor, if any; 
	  otherwise, it is placed relative to the initial containing block.
	  
NB:  A "positioned element"

		is an element whose computed position value is either relative, absolute, fixed, or sticky.
		In other words, it's anything except static.
	
More on the position property:
- https://developer.mozilla.org/en-US/docs/Web/CSS/position	
 	
The position is not too good though...

Instead of using "left: 400px" putting the badge 400px from the left side of the plan div,
leẗ́s position it 40px from the right instead.

.package__badge {
    position: absolute;
    top: 0;
    right: 40px;
    margin: 20px;
    padding: 10px;
    font-size: 12px;
    color: white;
    background: #ff5454;
}

However when we scroll our content - it covers the nav bar, so we fix that:

	main-header {
			background: #2ddf5c;
			padding: 8px 16px;
			width: 100%;
			position: fixed;
			top: 0;
			left: 0;
			z-index: 1;      <-- like so
	}

Actually the first package div has its upper border covered by the nva bar so I will
move it down a bit using:

	top: 40px:
	
--------------------------------------------------------------------------------------------------
Lecture 089 Diving Deeper into Relative Positioning
---------------------------------------------------------------------------------------------------	

Some theory again using our demo html code:

	<!DOCTYPE html>
	<html lang="en">
			<head>
					<meta charset="UTF-8">
					<meta http-equiv="X-UA-Compatible" content="ie=edge">
					<link rel="stylesheet" href="main.css">
					<title>Position</title>
			</head>
			<body>
					<div class="parent">
							<div class="child-1">Navigation Bar</div>
							<div class="child-2">Background Image</div>
							<div class="child-3">Features</div>
					</div>
			</body>
	</html>
	
And we use the css:

	.parent .child-1 {
		position: relative;
	}

Nothing changes... But if we add:

	  left: 50px;
		top: 50px;
		
We move the first div 50x from the left and from the top, relative to its own original position.
The positioning context is the element itself!

We also see that it stick out from - or overflows - its container div.
Not usually what you want, but sometimes.

--------------------------------------------------------------------------------------------------
Lecture 090 Working with "overflow" and Relative Positioning
---------------------------------------------------------------------------------------------------	

To avoid having an element that is positioned to overflow, or move outside its parent
we can apply "overflow: hidden" to the parent:

.parent {
    background: white;
    padding: 20px;
    border: 5px solid black;
    margin: 0;
    overflow:  hidden;          <--- here
}

Although that is not usually the solution...

NB: 

	By default we can not apply "overflow:  hidden;" to the BODY element alone.
	We have to aplly to both BODY + HTML elements in that case.
	
	
--------------------------------------------------------------------------------------------------
Lecture 091 Introducing "sticky" Positioning
---------------------------------------------------------------------------------------------------	

We have some new html:

	<!DOCTYPE html>
	<html lang="en">
			<head>
					<meta charset="UTF-8">
					<meta http-equiv="X-UA-Compatible" content="ie=edge">
					<link rel="stylesheet" href="main.css">
					<title>Position</title>
			</head>
			<body>
					<div class="parent">
							<div class="country">USA</div>
							<div class="cities">San Francisco</div>
							<div class="cities">New York</div>
					</div>
					<div class="parent">
							<div class="country">France</div>
							<div class="cities">Nice</div>
							<div class="cities">Paris</div>
					</div>
					<div class="parent">
							<div class="country">Germany</div>
							<div class="cities">Berlin</div>
							<div class="cities">Munich</div>
					</div>
			</body>
	</html>

And inital css:

	html {
			/*background: #b3b3b3;
			padding: 15px;
			border: 5px solid white;
			margin: 15px;*/
			height: 2000px;
	}

	body {
			/*background: #fa923f;
			padding: 20px;
			border: 5px solid black;*/
			margin: 0;
		}
		
	.parent {
			background: white;
			padding: 20px;
			/*border: 5px solid black;*/
			margin: 10px;
		}

	.parent .country {
			background: #fa923f;
			color: white;
			padding: 10px;
			border: 5px solid black;
			margin: 10px;
	}
		
	.parent .cities {
			background: rgb(105, 105, 109);
			color: white;
			padding: 10px;
			border: 5px solid black;
			margin: 10px;
	}


If we add "position: sticky" to the country div...

	.parent .country {
		...
		position: sticky;
	}

	Nothing changes.
	
And if we add "top: 20px;" we get...

.parent .country {
    background: #fa923f;
    color: white;
    padding: 10px;
    border: 5px solid black;
    margin: 10px;
    position: sticky;
    top: 20px;
}

Using "position: sticky" is a combination of relative and fixed.
- If scroll the page the element sticks when it reaches the edge of the viewport minus 20 pixels.
- If we continue to scroll it remains "sticky" until we scroll past the content of its parent element.

To see this moreclearly we change the css thus:

	html {
			background: #b3b3b3;
			padding: 15px;
			border: 5px solid white;
			margin: 15px;
			height: 2000px;
	}

	body {
			background: #fa923f;
			padding: 20px;
			border: 5px solid black;
			margin: 0;
		}
		
	.parent {
			background: white;
			padding: 20px;
			border: 5px solid black;
			margin: 10px;
		}
		

However sticky may not be supported on older browsers... But who uses old browesers?
- https://caniuse.com/#search=sticky


---------------------------------------------------------------------------------------------------
Lecture 092 Understanding the Stacking Context
---------------------------------------------------------------------------------------------------	

Each fixed element constitutes it own "stacking context"

So, elements inside a "position: fixed" element...
- Can only compete with z-index between themselves, regarding which is on top of each other.
- Can never be "better" than their parent stackin-wise

	<!DOCTYPE html>
	<html lang="en">
			<head>
					<meta charset="UTF-8">
					<meta http-equiv="X-UA-Compatible" content="ie=edge">
					<link rel="stylesheet" href="main.css">
					<title>Position</title>
			</head>
			<body>
					<div class="navigation">navigation</div>        <-- css: position: fixed;
					<div class="headline">headline                  <-- css: position: fixed;
					
							<div class="image-1">image-1</div>          <-- css: z-index: 3;
							<div class="image-2">image-2</div>          <-- css: z-index: 2;
							<div class="image-3">image-3</div>          <-- css: z-index: 1;
							
					</div>
					<div class="contact-us">contact-us</div>        <-- css: position: fixed;
			</body>
	</html>


---------------------------------------------------------------------------------------------------
Lecture 094 Useful Resources & Links
---------------------------------------------------------------------------------------------------	

Positioning theory: 
https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning

More about the "position" property: 
https://developer.mozilla.org/en-US/docs/Web/CSS/position

The z-index: 
https://developer.mozilla.org/en-US/docs/Web/CSS/z-index

The Stacking Context: 
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context

The "sticky" value and current browser support: 
https://caniuse.com

---------------------------------------------------------------------------------------------------
SECTION 007 Understanding Background Images & Images
---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
Lecture 097. Understanding "background-size"
---------------------------------------------------------------------------------------------------

Up til now we have used the short hands:

#product-overview { ...

	background: url("freedom.jpg");    -- OR --
	background: red;

But we can define both a background color and an image:

	background-image: url("freedom.jpg");
	background-color: red;
	
In this case the image will be on top of the color.

We also want to position the background picture a little better
- We don't see more trhan a fractrion of it right now.

Just to experiment, we could use:
	background-size: 100px: 
	
	The background imaghe would be a repeated image of 100px, so many small ones.
	
If we use:
	background-repeat: no-repeat;   - we get one smal picture only

	If we use:
	background-repeat: repeat-x;    - the picture is repeated only on the x-axis
	background-repeat: repeat-y;    - the picture is repeated only on the y-axis
		
	If we increase th size:
	background-size: 300px;         - it look slighly better - but is still way to small
	
	If we use 2 values
	background-size: 300px 100px;   - The picture is forced into those XxY dimensions - ignoring aspect
	
	We can use percentages:
	background-size: 50%;           - Picture covers half of the page
	background-size: 100%;          - Picture covers whole page
	
	We can use 2 percentages:
	background-size: 100% 30%;      - And again the picture is warped out of its normal aspect ratio ration.
	
	We can use auto + 1 percentage:
	background-size: auto 100%;     - Picture fills height - and width according to aspect ratio (auto).
	
	We can also use:                - Fills the entire container:
	background-size: cover;         -- "auto 100%" if picture has portrait aspect
	                                -- "100% auto" if picture has lanscape aspect
	                              
	We can also use:                - Fills as much of the entire container it can... 
	background-size: contain;       -- without cropping the picture
	                                -- again, with regard to landscape/portrait
	
---------------------------------------------------------------------------------------------------
Lecture 098 Working with "background-position"
---------------------------------------------------------------------------------------------------

We don't like the position of the image - we want to focus on the woman in the picture:

Let's position the background image with px units:

		background-position: 20px;         - Picture is moved 20px from the left of the container
		background-position: 20px 50px;    - Picture is moved 20px from the left and 50 from the top

Let's position the background image with percentages:

		With 1 value: How many percent of overflow should be cropped on the left?
		With 2 value: How many percent of overflow should be cropped on the left & at the top
		
		background-position: 20%;          - Overflow is cropped 20% from the left 
		                                   - But we have no overflow due to "background-size: cover"
		=                                   
    background-position: 20% 50%;	     = 50% from top and bottom is the default
		                                   
		background-position: 0% 10%;       - Picture not cropped horizontally - we have no overflow
                                       - but 10% from the top if necessary - and 90% from bottom
		                                  
		If we want to crop it equally on left/right and top/bottom we can use:
		background-position: 50% 50%;   -- OR --
		background-position: center;
		
		If don't want to crop it on left or the top:
		background-position: left top;
		background-position: 0% 0%;
		
		If we want to crop it on 10% left and 20% of the bottom:
		background-position: left 10% bottom 20%;
		
		Le't use that!

So now we have:

	#product-overview { 
			background-image: url("freedom.jpg");
			background-size: cover;
			background-position: left 10% bottom 20%;
			background-repeat: no-repeat;
			width: 100%;
			height: 528px;
			padding: 10px;
			margin-top: 43px;
			position: relative;
	}
		
---------------------------------------------------------------------------------------------------
Lecture 099 The "background" Shorthand - Theory
---------------------------------------------------------------------------------------------------		
		
The background property is a shorthand propterty:

Behind it there are several more specific properties:

- bakground-color         

- background-image        Set one - or more - background images
- background-repeat       Set how images are repeated if too small to fill browser window
- background-size
- background-position     Set initial position, relative to the background position layer.
- background-origin       Set bakground positioning area - relevant to images    

- background-clip         Set whether the background in clipped by the border or goes beneath it
- background-attachment   Set how a background image is affected by scrolling


---------------------------------------------------------------------------------------------------
Lecture 100 Applying "background" Origin, Clip & Attachment
---------------------------------------------------------------------------------------------------		

Let's delve deeper into some of these properties:

background-origin       Set bakground positioning area - relevant to images    
-----------------

#product-overview { 
     background-image: url("freedom.jpg");
     background-size: cover;
     background-position: left 10% bottom 20%;
     background-repeat: no-repeat;
     width: 100%;
     height: 528px;
     padding: 10px;
     margin-top: 43px;
     border: 5px dashed red;  <---- Add this!
}

When we do this:

- We get the dashed border, ok!
- On the sides we see white padding in the gaps of the dashed border
- On the top and bottom we see the image in the border gaps
- Because the bg image is scaled/cropped vertically and that happens after the border.

Now if we specify:
	
	#product-overview { 
	background-origin: border-box;
	
	-	Perfect, now the image goes under the border and shows in the gapsd all around!
	- We have defined the container for our image.
	- So "border-box" means = fill background including border and padding. 	

If we specify:
	
	#product-overview { 
	background-origin: content-box;

	- Now the image is shown under the gaps top and bottom
	- But on the sides the image does not even reach the border, we have white padding inside the border.
	- So "content-box" means = fill background except border and padding. 

If we specify the DEFAULT value of...
	
	#product-overview { 
	background-origin: padding-box;
	
	- Now the image goes under the padding but not the border.
	- So "padding-box" means = fill background including padding but not the border

Let's restore this to the best value, in our case:
	
	#product-overview { 
	background-origin: border-box;

REMEMBER:

- When excess parts of a bg image is automatically cropped due to scaling,
  the affected side of the image - by default - extend underneath the border .
  
- This can be overridden by the property "background-clip"...


background-clip         Set whether the background in clipped by the border or goes beneath it
-----------------

So, if we specify:

	#product-overview { 
	background-origin: border-box;
	background-clip: padding-box;
	
 - The image is clipped inside the border - but covering any padding - on all sides
 
If we specify:

	#product-overview { 
	background-origin: border-box;
	background-clip: content-box;
	
 - The image is clipped inside the border - and inside any padding - on all sides.

Let's restore this to the best value, in our case:
	
	#product-overview { 
	background-origin: border-box;
  background-clip: border-box;
 

Then we have...

background-attachment   Set how a background image is affected by scrolling
---------------------

This property...

Specifies whether the background images are fixed with regard to the viewport ('fixed'),
or scroll along with the element ('scroll') or its contents ('local').
  
- "fixed"   Image is fixed relative to the viewport.
- "local"   Image is fixed relative to the content.
- "scroll"  Image is fixed relative to the element itself and does not scroll with its contents.

Ref: https://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment

We'll just set the property to the default here just to make it cleare which one is used:
     background-attachment: local;
     
---------------------------------------------------------------------------------------------------
Lecture 101 Using the "background" Shorthand on our Project
---------------------------------------------------------------------------------------------------

Up till now we have these background properties set:

#product-overview { 
     background-image: url("images/freedom.jpg");
     background-size: cover;
     background-position: left 10% bottom 20%;
     background-repeat: no-repeat;
     background-origin: border-box;
     background-clip: padding-box;
     background-attachment: local;
     ...
}
     
How can we make this shorter? ME: Do we really want to?

We can combine these:

     background-image: url("images/freedom.jpg");
     background-size: cover;
     background-position: left 10% bottom 20%;
     
Into:

     background-image: url("images/freedom.jpg") left 10% bottom 20%/cover;
     
---------------------------------------------------------------------------------------------------
Lecture 102 Styling images
---------------------------------------------------------------------------------------------------

We'll replace the text uHost with an image:

<div>
        <a href="index.html" class="main-header__brand">
           uHost
        </a>
 </div>

<div>
        <a href="index.html" class="main-header__brand">
           <img src="images/uhost-icon.png" alt="uHost - Your favorite hosting company"
        </a>
 </div>

- We place a new image in the images folder: mages/uhost-icon.png.
- We also moverd the freedom.jpg image there.

Ooh, it's a bit big, though!

If we in shred.ccs add:

.main-header__brand {
    color: #0e4f1f;
    text-decoration: none;
    font-weight: bold;
    font-size: 22px;
    height: 22px;      <--- here
}

This has no effect at all:
By default - the image is not limited to the height property of an inline containing element,
like our an a(nchor) element but will use the height an width it needs for its original size.

What if we specifically style the image? 

.main-header__brand  img{
   height: 22px;
}

Yay, that works! Now it's 22px!

What if set it to 100% - of the height offered by the container?

.main-header__brand  img{
   height: 100%;
}

NO, it's big again! It will use 100% of its own height!

NB: This is due to the fact that the containing element is an INLINE element!
NB: An image does not respect the  height and width properties of an inline container element.

So, if we force our a element to become a block element, like:
.main-header__brand {
    color: #0e4f1f;
    text-decoration: none;
    font-weight: bold;
    font-size: 22px;
    height: 22px;
    display: inline-block;
}

Then we just tell our image to assume 100% of its containers height:

.main-header__brand  img{
   height: 100%;
}

YAY, it works!

---------------------------------------------------------------------------------------------------
Lecture 103 Adding the Customers Page to our Website
---------------------------------------------------------------------------------------------------

Let's add a customers page:

customers/
	customers.css
	index.html

images/
	customer1.jpg
	customer2.jpg

We will copy the header section from out main page index.html...
And we will have to modify the relative paths of links and image references.

We test the customers-link from the main page and it works!
That done, we can continue to next lesson...

---------------------------------------------------------------------------------------------------
Lecture 104 Working on the Image Layout
---------------------------------------------------------------------------------------------------

For the firat restimonial we have a pseudo-property - first-of-type like:

.testimonial:first-of-type {
    margin-top: 96px;
  }

...so we can style things specifically for that element.

We will create 2 classes for the different parts of the testimonial:

  .testimonial:first-of-type {
    margin-top: 96px;
  }
  
  .testimonial__image-container {
    width: 100%;
    display: inline-block;
  }

NB: The double underscore notation following the BEM notatin style.


We add a box-shadow for the image container:
box-shadow: 3px 3px 5px 3px rgba(0,0,0,0.3);

I can see a thin line of white space at the bottom of the image.

The bottom whitespace is solved by using this on the image css:
vertical-align: top; 

Why, I don't understand.

---------------------------------------------------------------------------------------------------
Lecture 105 Understanding Linear Gradients
---------------------------------------------------------------------------------------------------

Let's try a linear gradient in stead of our main background picture:

A simple gradient in red to blue, top-to-bottom:
#product-overview { 
     background-image: linear-gradient(red, blue);

NB: The first value is the direction, and like we saw, by default it is:
	"to bottom" = top-to-bottom

Another value would be:
	"to left bottom" = direction from upper right to left bottom

We can use an angle:
	"30deg" = look much like "to left bottom"
	"0deg"  = "to top"
	"180deg = "to bottom"  (default)

You can use colors, rgb hexcodes, "transparent", or degrees of tranparency using rgba(a,b,c,d):
	background-image: linear-gradient( red, blue, green, yellow, orange, #fa923f, transparent, rgba(0,0,0,0.5));

You can also control when different colors start and stop:

/* Color stop: A gradient from bottom to top, starting blue, turning green at 40% of its length, finishing red */
linear-gradient(0deg, blue, green 40%, red);

/* Color hint: A gradient going from the left to right, starting red, getting to the midpoint color 10% of the way
 across the length of the gradient, taking the rest of the 90% of the length to change to blue */ 
linear-gradient(.25turn, red, 10%, blue);

/* Multi-position color stop: A gradient tilted 45 degrees, with a red bottom-left half and a blue top-right half, 
   with a hard line where the gradient changes from red to blue */
linear-gradient(45deg, red 0 50%, blue 50% 100%);

More: https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient

---------------------------------------------------------------------------------------------------
Lecture 106 Applying Radial Gradients
---------------------------------------------------------------------------------------------------

This creates a centered red ellipse in the middle of a blue background;
	background: radial-gradient(red, blue)

This creates a centered red circle in the middle of a blue background;
	background: radial-gradient(circle, red, blue)

This creates a red circle with its center at the top, in a blue background;
	background: radial-gradient(circle at top, red, blue)

This creates a red circle with its center at the top left, in  a blue background;
	background: radial-gradient(circle at top left, red, blue)

This creates a red circle with its center 20% from the left and 50% down from the top, in a blue background;
	background: radial-gradient(circle at top left, red, blue)

Add size value...

This creates a 20px wide red circle centered 20% from the left and 50% from the top, in a blue background;
	background-image: radial-gradient(circle 20px at top left, red, blue)

You can also use the same typoe of color start and stop as for linear gradients.

---------------------------------------------------------------------------------------------------
Lecture 107 Stacking Multiple Backgrounds
---------------------------------------------------------------------------------------------------

You can use multiple images:

- url()
- linear-gradient()
- radial-gradient,
- rgba() 

However...

NB: Only ONE solid background color may be used, like red, blue etc.
NB: The solid color will be at the bottom of images, gradients and so on.

So we can do this:

background: linear-gradient(to top,rgba(80,68,18,0.6) 10%, transparent), url("images/freedom.jpg") left 10% bottom 20%/cover no-repeat border-box, red;

- At the top we have a semi-transparent gradient.
- Then we have our old picture under that
- And we have red as a backup color if the browser was unable to load he image.

NB: Each gradient, image and solid color are separated by a comma (,).

---------------------------------------------------------------------------------------------------
Lecture 108 Understanding Filters
---------------------------------------------------------------------------------------------------

What is a filter?

Given html: 
	<div></div>

And css - producing a brown rectangle:
	div {
		background: brown;
	}

We can then add a filter like blur() to blur the whole box:

	div {
		background: brown;
		filter: blur(10px);
	}

Other filters are:

	filter: blur(5px);
	filter: brightness(0.4);
	filter: contrast(200%);
	filter: drop-shadow(16px 16px 20px blue);
	filter: grayscale(50%);
	filter: hue-rotate(90deg);
	filter: invert(75%);
	filter: opacity(25%);
	filter: saturate(30%);
	filter: sepia(60%);

Let play with the packages page:

.background {
    background: url("../images/plans-background.jpg");
    background: url("../images/plans-background.jpg") center/cover;  <--- Add this

More: https://developer.mozilla.org/en-US/docs/Web/CSS/filter

---------------------------------------------------------------------------------------------------
Lecture 109 Adding & Styling SVGs - The Basics
---------------------------------------------------------------------------------------------------

Let's add some svg graphics -encloed as a resource - On our main page:

<div class="key-feature__image">
    <svg viewBox="0 0 512 512">
        <path style="fill:#8E9AA9;" d="M168,200c-4.418,0-8,3.582-8,8v120h-17.376c-3.302-9.311-12.194-16-22.624-16  c-13.234,0-24,10.767-24,24s10.766,24,24,24c10.429,0,19.321-6.689,22.624-16H168c4.418,0,8-3.582,8-8V208  C176,203.582,172.418,200,168,200z"
        />
	...

Add all three images... And then code the css:

.key-feature__image {
    background: #ffcede;
    width: 128px;
    height: 128px;
    border: 2px solid #424242;
    border-radius: 50%;
    margin: auto;
	padding: 20px;   <--- add this
}

MORE:

Backgrounds    : https://developer.mozilla.org/en-US/docs/Web/CSS/background
Styling Images : https://www.w3schools.com/css/css3_images.asp
Filters        : https://developer.mozilla.org/en-US/docs/Web/CSS/filter
Styling SVG    : https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/SVG_and_CSS


---------------------------------------------------------------------------------------------------
SECTION 008 Sized and Units
---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
Lecture 112 Module Introduction
---------------------------------------------------------------------------------------------------



















