---------------------------------------------------------------------------------------------------
UDEMY CSS - THE COMPLETE GUIDE
---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
Setting up repo in Github
---------------------------------------------------------------------------------------------------

Created a new repo at htts://github.com

	- Chose not to create a Readme file
	- I will push my existing repo to this remote

Initialized my course directory and made my first commit:

	$ git init 
	$ git add .
	$ git commit -m "First commit"

Pushed my existing repository from the command line:

	$ git remote add origin git@github.com:goranbr/udemy-css-tcg.git
	$ git push -u origin master

---------------------------------------------------------------------------------------------------
SECTION 001 Getting Started
---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
Lecture 009 Recommended tools
---------------------------------------------------------------------------------------------------

- Visual Studio Code
	https://code.visualstudio.com/

- Chrome Browser
	# apt-get install chromium-browser

---------------------------------------------------------------------------------------------------
SECTION 002 Diving Into the Basics of CSS	
---------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------
Lecture 016 Applying Additional Styles & Importing Google Fonts
---------------------------------------------------------------------------------------------------

Importing Google fonts:
	- Google: "Google fonts"
	- Find a font that you like and read the instructions

In the html head section:
	<link href="https://fonts.googleapis.com/css?family=Anton" rel="stylesheet">
	
In the css rules:
	font-family: "Anton", sans-serif
	
	
---------------------------------------------------------------------------------------------------
Lecture 021 Theory Time - Combinators
---------------------------------------------------------------------------------------------------

Understanding Combinators

Adjacent sibling (+):
	- h2 + p { ... }
	- Element share the same parent
  - Second element follows immediately after first element
	
	Example:
	<h2>...</h2>
	<p>Applied here</p>
	
General sibling	(~):
	- h2 ~ p { ... }
	- Element share the same parent
	- Second element comes somewhere after first element

	Example:
	<h2>...</h2>
	<p>Applied here</p>
	<p>Applied here also</p>
	
Child (>):
	- div > p { ... }
	- Second element a direct child of the first
	
	Example:
		<div>Main text</div>
		<p>Applied here</p>
	
Descendant (space):
	- div  p { ... }
	- Second element is a descendant of the first
	
	Example:
		<div>Main text</div>
		<h1>My header</h1>
		<p>Applied here</p>
	
	
---------------------------------------------------------------------------------------------------
Lecture 022 Summarizing Properties & Selectors
---------------------------------------------------------------------------------------------------

Selectors, Properties and Values...

SELECTORS
---------------------------------------

- elements   : div
- classes    : .menu-titles
- id's       : #main-title
- attributes : [disabled]
- universal  : *

PROPERTIES
---------------------------------------

- background 
- width
- color
- margin
- display
- https://developer.mozilla.org/en-US/docs/Web/CSS/Reference

VALUES
---------------------------------------

Values are tightly coupled to each specific property:

Pre-defined options:
- display: block
- overflow: auto

Colors:
- red,#fa4545, #ccc

Length, sizes and numbers:
- 30%, px, 3

Functions:
- background: url(...);
- transform: scale(...);

---------------------------------------------------------------------------------------------------
SECTION 003 Diving Deeper into CSS
---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
Lecture 025 Module Introduction
---------------------------------------------------------------------------------------------------

In this module:

- The box module
- Height and width
- The display property
- "Properties worth to remember"
- Pseudo classes & elements

---------------------------------------------------------------------------------------------------
Lecture 028 Understanding Margin Collapsing and Removing Default Margins
---------------------------------------------------------------------------------------------------

Removing Default Margins:
	body { margin: 0px; }
	
Margin Collapsing:
- Two adjacent margins are collapsed by default
- The bigger margin defines the shared margin 
- https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing

---------------------------------------------------------------------------------------------------
Lecture 032 Diving Into the Height & Width Properties
---------------------------------------------------------------------------------------------------

- Block level elements always take up 100%  of the - available - width by default.

---------------------------------------------------------------------------------------------------
Lecture 033 Understanding Box Sizing
---------------------------------------------------------------------------------------------------

When we change an elements width and height - what are we really changing the size of, in terms
of its parts - content, padding, border, margin? 

This behaviour can be modified by using the property: box-sizing

By default: 

	- box-sizing: content-box 
	- Only the content is addressed by the value you specify
	- The browser then adds the padding, border and the margin.

Including the padding and border:

	- box-sizing: border-box
	- Here the width/height includes the padding and border
	- Not the margin though
		
To use this inclusive box as the default:
	
		* { box-sizing: border-box; }
		
---------------------------------------------------------------------------------------------------
Lecture 035 Understanding the Display Property
---------------------------------------------------------------------------------------------------		

The most common values for the display property is...

	block   - the element takes up the whole with, and its own row
	inline  - the element only takes up the minimum amount of space
	none    - the element is hidden, takes up no space, and is removed from the DOM

NB: To hide an element but keeps its space and its part of the DOM, use:
		visibility: hidden

But there is also a value called inline-block:
	- the element does not take up 100% horizontal space
	- you can use the box-model to modify padding, border, margin 
	
To create a nice horizontal top menu:
	- We can use an unordered list (ul)
	- We set the display property on the list items (li) to: display: inline-block

	<ul class="main-nav__items">
		<li class="main-nav__item"> <a href="packages/index.html">Packages</a> </li>
		...
		
	.main-nav__item {
			display: inline-block;
	}

BLOCK-LEVEL ELEMENTS 

- Rendered as a block and hence take up all the available horizontal space. 
- You can set margin-top and margin-bottom and two block-level elements will render in two different lines.
- Some examples are: <div> , <section> , <article> , <nav>  but also <h1> , <h2>  etc and <p> .

INLINE ELEMENTS 

- Only take up the space they require to fit their content in. 
- Two inline-elements will fit into the same line (as long as the combined content doesn't take up the entire space)
- They also use the box-model you learned about but margin-top  and margin-bottom  have no effect on the element. 
- Properties padding-top  and padding-bottom have a different effect. 
- They don't push the adjacent content away but they will do so with the element border. 
- Setting a width  or height  on an inline element also has no effect. 
- Some example elements are: <a> , <span> , <img> 
- More about this: https://hacks.mozilla.org/2015/03/understanding-inline-box-model/

INLINE BLOCK ELEMENTS

- If you want to do so or need both block-level and inline behavior, you can set display: inline-block


---------------------------------------------------------------------------------------------------
Lecture 043 Theory Time - Pseudo Classes & Pseudo Elements
---------------------------------------------------------------------------------------------------

PSEUDO CLASSES 

	Defines the style for a special state of an element:
	:class_name
	
	More: https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
	
	
PSEUDO ELEMENTS:

	Defines the style for a special part  of an element:
	::element_name

	More: https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements
	
	Example: mark up the first letter in a paragraph:
	
	p::first-letter {
			color: red;
			font-size: 20px;
	}

	Example: Add and style added content after the main content of an element:
	
	.main-nav__item a::after {
			content: " (Link)";
			color: red;
	}

---------------------------------------------------------------------------------------------------
Lecture 044 Grouping Rules
---------------------------------------------------------------------------------------------------

You can group several rules together with a comma - if the selectors should have the same style:

From:

	.main-nav__item a:hover  { color: white; }
	.main-nav__item a:active { color: white; }

To:

	.main-nav__item a:hover,
	.main-nav__item a:active 
	{
		color: white; 
	}

	
---------------------------------------------------------------------------------------------------
Lecture 046 Adding & Styling a CTA-Button
---------------------------------------------------------------------------------------------------

We want to add some extra style to the "Start hosting" link.
It's what is called a CTA link - Call to Action - a link we want to emphasize.

We will add an extra class to that element:

	<li class="main-nav__item main-nav__item--cta">
	
NB:

	The authors of the course use a method of naming classes called BEM:
	Block Element Modifyers
	
	Given our name above, main-nav__item--cta:
	main-nav = is a block    (Standalone entity that is meaningful on its own)
	__item   = is an element (A part of a block that has no standalone meaning, and is semantically tied to its block)
	--cta"   = is a modifier (A flag on a block or element. Use them to change appearance or behavior)

	More on that:
	- https://en.bem.info/methodology/
	- http://getbem.com/introduction/
	- https://css-tricks.com/bem-101/
	- https://www.smashingmagazine.com/2018/06/bem-for-beginners/
	
		
	So we add "--cta" to style a modificiation to the normal "main-nav__item" elements.

And add this extra css for that class:

	First the inactive state:
	.main-nav__item--cta a {
			color: white;
			background: #ff1b68;
			padding: 8px 16px;
			border-radius: 8px;
	}

	When hovering, we'll remove the border, and invert the colors of text and background:
	.main-nav__item--cta a:hover,
	.main-nav__item--cta a:active {
			color: #ff1b68;
			background: white;
			border: none;
	}

---------------------------------------------------------------------------------------------------
Lecture 047 Adding a Background Image to our Project
---------------------------------------------------------------------------------------------------	

We'll replace the red background with a picture for the product overview part of our webpage:

	#product-overview { 
     /*background: #ff1b68; */
     background: url("freedom.jpg");
     width: 100%;
     height: 528px;
     padding: 16px;

}

---------------------------------------------------------------------------------------------------
Lecture 049 Wrap Up
---------------------------------------------------------------------------------------------------	


Both block and inline elements conform to the box model
- With the exception that inline elements ignore margin-top and margin bottom properties.
- https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model

When you use width and height properties there are two ways to count
- content-box - the sizes you speficy make up the content measurements only
- border-box - the sizes you speficy make up content+padding+border measurements as a whole

- https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing
- https://www.w3schools.com/css/css_dimension.asp

With the diplay property with can specify an element to conform to being
- inline
- block
- inline-block  (element does not get a row of its own)
- none          (elemt removed from the documnet flow and what you see, not the DOM)

- https://developer.mozilla.org/en-US/docs/Web/CSS/display


---------------------------------------------------------------------------------------------------
SECTION 004 More on Selectors & CSS Features
---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
Lecture 052 Using Multiple CSS Classes & Combined Selectors
---------------------------------------------------------------------------------------------------	

Emphasis:

- You can use multiple classes on one element

- And if you do - and the css for those classes apply styling for the same property, 
  then the normal rules for specificity and order rule applies.

---------------------------------------------------------------------------------------------------
Lecture 053 Classes or IDs?
---------------------------------------------------------------------------------------------------	 

CSS Class Selectors
- Reusable
- Allow you to mark and name things for styling purposes only
- It's rately wrong to use a class
- Should normally be your selector of choice

CSS ID Selectors
- Only used once per page
- Also has a non-css meaning (e.g. page link): 

	<a href="#intro" class="active">Intro</a>  --->  <section id="intro" class="main-section">
	
- Can be used if already present
- Don't use them just to add some ccs styling

---------------------------------------------------------------------------------------------------
Lecture 054 (Not) using !important
---------------------------------------------------------------------------------------------------

Example:

	div {
		color: red !important;
	}
	
What does "!important" do?
- It overrides specificity and all other selectors

SO--- RARELY IF EVER USE IT!

---------------------------------------------------------------------------------------------------
Lecture 055 Selecting the Opposite with :not()
---------------------------------------------------------------------------------------------------

The :not() pseudo class:

Examples:

	/* selects any el that is not a paragraph */
	:not(p) {
		color: blue;
	}

	/* selects any anchor that is of class "active" */
	a:not(.active) {
    color: blue;
}
	
- Use this pseudo clas with caution	
- Better to use "positive" selectors than "negating".

---------------------------------------------------------------------------------------------------
Lecture 056 CSS & Browser Support
---------------------------------------------------------------------------------------------------

There is a very good web page to tell you which browsers support a certain feature of css:
- https://caniuse.com/

---------------------------------------------------------------------------------------------------
Lecture 058 Useful Resources & Links
---------------------------------------------------------------------------------------------------


A discussion on "classes vs IDs": 
https://stackoverflow.com/questions/12889362/difference-between-id-and-class-in-css-and-when-to-use-it

When is using !important  okay?
https://css-tricks.com/when-using-important-is-the-right-choice/

The :not()  pseudo class:
https://developer.mozilla.org/en-US/docs/Web/CSS/:not

Can I Use (a certain feature on a specific browser)?:
https://caniuse.com/


---------------------------------------------------------------------------------------------------
SECTION 005 Practicing the Basics
---------------------------------------------------------------------------------------------------    

---------------------------------------------------------------------------------------------------
Lecture 061 Working on the recommended plan
---------------------------------------------------------------------------------------------------

We add a class for state of the recommended plan - highlighted:
<article class="plan plan--highlighted">

And a class for the part of the plan that is the header (h1) text:
<h1 class="plan__annotation">RECOMMENDED</h1>

Then we use css to give the recommended plan..
- White text, green background, and a gray transparent drop shadow of 2px

	.plan--highlighted {
			background: #19b84c;
			color: white;
			box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.5);

	}
	
---------------------------------------------------------------------------------------------------
Lecture 062 Styling the Badge with "border-radius"
---------------------------------------------------------------------------------------------------

Finishing off the recommended header, we'll..
- make the text green
- its background white
- add more padding
- add a drop shadow

	.plan__annotation {
			background: white;
			color: #19b84c;
			padding: 8px;
			box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.5);
	}

Then we want to round off the corners on the recommended header...
- So we add -- border-radius: 8px;

	.plan__annotation {
			background: white;
			color: #19b84c;
			padding: 8px;
			box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.5);
			border-radius: 8px;
	}

---------------------------------------------------------------------------------------------------
Lecture 063 Styling our List
---------------------------------------------------------------------------------------------------

We want to remove the bullets on our list...

We add a new class to the ul elements:

	<ul class="plan__features">
	<li>1 Workspace</li>
	<li>Unlimited Traffic</li>
	<li>10GB Storage</li>
	<li>Basic Support</li>
	/ul>

We also want to give each list item some vertical space:	
	
We could then style that thus:

	.plan__features {
			list-style: none;
			padding: 0;
	}	

But in keeping with our BEM method, we'll add yet another class for those elements:

	<ul class="plan__features">
		<li class="plan__feature">5 Workspaces</li>
		<li class="plan__feature">Unlimited Traffic</li>
		<li class="plan__feature">100GB Storage</li>
		<li class="plan__feature">Plus Support</li>
	</ul>
	
And style them thus:



---------------------------------------------------------------------------------------------------
Lecture 064 Working on the Title and the Price of our Packages
---------------------------------------------------------------------------------------------------

We want to add some styling to the name and price of the plans too:

In the html:

	<article class="plan">
	<h1 class="plan__title">FREE</h1>
	<h2 class="plan__price">$0/month</h2>
	...
	
And style those thus:

	.plan__title {
			color: #0e4f1f;
	}

	.plan__price {
			color: #ddd;
	}


And for the recommended plan name and price...

	.plan--highlighted .plan__title {
			color: white;
	}

	.plan--highlighted .plan__price {
			color: #0e4f1f;
	}

---------------------------------------------------------------------------------------------------
Lecture 065 Improving our Action Button
---------------------------------------------------------------------------------------------------

Let's style the page buttons...

Let's add a class for generic buttons first:

	<div>
		<button>CHOOSE PLAN</button>
	</div>

	<div>
		<button class="button">CHOOSE PLAN</button>
	</div>

And this css:

	.button {
			background: #0e4f1f;
			color: white;
	}

The button look a bit weird though...

	- It takes some of its style from the browser defaults - which overrides inherited styling
	- Let's make sure the font is inherited from our own css stylesheet
	- And make the button text bold

	.button {
			background: #0e4f1f;
			color: white;
			font: inherit       <---- thus!
			font-weight: bold;  <---- thus!
	}

And then we override the border (which will not bee seen until we hover over it):
	border: 1.5px solid #0e4f1f;
	
And change the padding:
	padding: 8px;

So we have...

	.button {
			background: #0e4f1f;
			color: white;
			font: inherit;
			border: 2px solid #0e4f1f;
			padding: 8px;
			border-radius: 8px;
	}	
	
However, when we hove can't see it's a button you can click. Let's change that:
	cursor: pointer;
	
Also when we hover we will change the styling by reversing the colors, thus:
	
	.button:hover, .button:active {
			background: white;
			color: #0e4f1f;

	}	
	
---------------------------------------------------------------------------------------------------
Lecture 066 Understanding Outlines
---------------------------------------------------------------------------------------------------	
	
On some browsers, like chrome, we can see an outline around the button signifying the
part of the web page that has the focus. Input fields also have this quality.

On chrome we want to remove this outline for the button, which looks ugly:

The outline shown by some browsers is not part of the box model, as such, but shown
outside the border of an element, and inside the margin.

We need to use the focus pseudo selector for this:
	.button:focus {
		outline: none;
	}

---------------------------------------------------------------------------------------------------
Lecture 067 Presenting the Core Features to the User
---------------------------------------------------------------------------------------------------		

Here we add another sction to our html:

        <section>
            <h1>Many Good Reasons to Stick Around</h1>
            <ul>
                <li>
                    <div>

                    </div>
                    <p>3,857,000 Trusting Customers</p>
                </li>
                <li>
                    <div>

                    </div>
                    <p>99.999% Uptime Guarantee</p>
                </li>
                <li>
                    <div>

                    </div>
                    <p>Lightning Fast CDN</p>
                </li>
            </ul>
        </section>
        
       
---------------------------------------------------------------------------------------------------
Lecture 068 Styling the Headline of the Core Features Section
---------------------------------------------------------------------------------------------------		 

We'll style the header of this html like the header for our plans...

The good thing here is - we can reuse the section-title class:

	<h1 class="section-title">Many Good Reasons to Stick Around</h1>

	Voilá! - markup reuse!

Then let's style the boring list...

First, let's give this seection an id - key-features - so we have...

	<section id="key-features">
	<h1 class="section-title">Many Good Reasons to Stick Around</h1>
	...
	
Let's style that:

	Background for the section:
	
	#key-features {
    background: #ff1b68;
    margin-top: 80px;
	}

	Let's make the header text white:
	
	#key-features .section-title {
			color: white;
			margin: 32px;
}

---------------------------------------------------------------------------------------------------
Lecture 069 Preparing the Content of the Key Feature Area
---------------------------------------------------------------------------------------------------

Let's also style the list of features:

We end up with this code:

	<section id="key-features">
	<h1 class="section-title">Many Good Reasons to Stick Around</h1>
	<ul class="key-features__list">  <--new class - a part of the key-features element!
	<li class="key-feature">         <--new class - a key-feature (singular) by definition
	<div></div>
	<p class="key-feature__description">3,857,000...</p>  <--new class - part of key-feature
	</li>
	...
	
And then style thus:

	.key-features__list {
			list-style: none;             - No bullet points
			margin: 0;  
			padding: 0;
	}

	.key-feature {
			display: inline-block;       - Align list items horizontally
			width: 30%;                  - Create a 3-column look
			text-align: center;          - Center the three items
	}

	.key-feature__description {      - Style for the p elements making up key-features
			text-align: center;
			font-weight: bold;
			color: white;
			font-size: 20px;
			vertical-align: top;         - Make thing look better in smaller displays
	}

We are then going to add an image for each feature item:

We create another class ""key-feature__image" whichis a part of each list item:

	<li class="key-feature">
		<div class="key-feature__image"></div>
		<p class="key-feature__description">3,857,000 Trusting Customers</p>
	</li>
	
We then create a filled pink circle using css:

	.key-feature__image {
			background: #ffcede;          - background filling for our circle
			width: 128px;                 - width = height for fully circular image
			height: 128px; 
			border: 2px solid #424242;
			border-radius: 50%;           - styles our div elements to be circular
	}

This puts the circles in a row above the features list:
	O        O         O
	  xxxx     xxxx    xxxxxx
	  
We need to center the circles:
	margin: auto;   
	
	This fills out the epty space on each side of the divs to center the circles horizontally
	
And we get:
      O         O        O
    xxxxx     xxxxx    xxxxx


---------------------------------------------------------------------------------------------------
Lecture 070 Adding the Footer
---------------------------------------------------------------------------------------------------	

We add a footer to our html - after the <main> part and before the body:

And we add a new class:

    </main>
    <footer class="main-footer">      <---- here!
        <nav>
            <ul>
                <li>
                    <a href="#">Support</a>
                </li>
                <li>
                    <a href="#">Terms of Use</a>
                </li>
            </ul>
        </nav>
    </footer>
</body>

We style it like:

	.main-footer {
			background: black;
			padding: 32px;
			margin-top: 48px;
	}

And then the li elements and anchors inside them:

	.main-footer__links {
			list-style: none;
			margin: 0;
			padding: 0;
			text-align: center;
	}

	.main-footer__link {
			display: inline-block;      - List them horizontally
			margin: 0 16px;             - We can only influence side margins
	}

	.main-footer__link a {         - Style the links - normal state
			color: white;
			text-decoration: none;
	}

	.main-footer__link a:hover,    - Style the links - when hovering or clicking
	.main-footer__link a:active {
			color: #ccc;
	}

---------------------------------------------------------------------------------------------------
Lecture 072 Adding the Packages Page
---------------------------------------------------------------------------------------------------		

We add a packages folder with an index.html file and a new css file:

	packages/index.html
	packages/packages.html
	
We copy the former html file...

	- but remove the main part...
	- and keep the header and footer.
  - and change the inter-site links from:

From:
  <a href="index.html" class="main-header__brand">
	<a href="packages/index.html">Packages</a>
	<a href="customers/index.html">Customers</a>
	<a href="start-hosting/index.html">Start Hosting</a>  
 
To:  
	<a href="../index.html" class="main-header__brand">
	<a href="index.html">Packages</a>
	<a href="../customers/index.html">Customers</a>
	<a href="../start-hosting/index.html">Start Hosting</a>

We'll also factor out css from main.css that should be shared between pages into a "shared.css" file:                    

- Factor out the *, body, the header, footer and button css code.

- We add the shared css to hte main page so we don't loose our shared styling, so we get:

    <link rel="stylesheet"    href="shared.css">    
    <link rel="stylesheet"    href="main.css">
    
- Note we put the shared above the main.css:
  -- main.css may need to override the shared styles.
  -- order matters!
  
In the 	packages/packages.html we put:

    <link rel="stylesheet"    href="../shared.css">    - Shared
    <link rel="stylesheet"    href="packages.css">     - Specific styling


---------------------------------------------------------------------------------------------------
Lecture 074 Styling the Links
---------------------------------------------------------------------------------------------------		

We have added some content to the main element of the packages page:

    <main>
        <section>
            <a href="#">
            <h1>Our PLUS Plan</h1>
            <h2>The most popular choice of our customers.</h2>
            <p>Benefit from increased storage and faster support to ensure that your mission-critical data and applications are always available!</p>
            </a>
        </section>
        <section>
            <a href="#">
            <h1>Our FREE Plan</h1>
            <h2>An extremely solid start into our hosting world.</h2>
            <p>Get started immediately at zero cost!</p>
            </a>
        </section>
        <section>
            <a href="#">
            <h1>Our PREMIUM Plan</h1>
            <h2>All your enterprise needs. Instant support, guaranteed uptime. </h2>
            <p>The best solution for small to large enterprises. Because hosting shouldn't be in the way!</p>
            </a>
        </section>
    </main>

    
We start by pushing down the main contents with this css:

	main {
			margin-top: 32px;;
	}
    
We also add a class to our section's, each of which denotes a package:

	<section class="package">
	
And we add som e more styling:

main {
    margin-top: 32px;;
}

	.package {
			width: 80%;                  - Plans cover 80% of the page
			margin: 16px 0;
			border: 4px solid green;
			border-left: none;           - The plans sticks out from the left side
	}

We then style links like:

	.package a {
			text-decoration: none;      - No underline or such struff
			color: inherit;
			display: block              - Make link extend the whole width of containing div
			padding: 32px;
	}

NB: the link (a) element contains h1 and h2 elements as well as a paragraph (p) element:

	<section class="package">
		<a href="#">
		<h1>Our PLUS Plan</h1>
		<h2>The most popular choice of our customers.</h2>
		<p>Benefit from increased storage and faster support to ensure that your
				mission-critical data and applications are always available!</p>
		</a>
	</section>

---------------------------------------------------------------------------------------------------
Lecture 075 Styling our Package Boxes
---------------------------------------------------------------------------------------------------	

We add some more classes to the part of the package sections:

	<section class="package">
		<a href="#">
		<h1 class="package__title">Our PLUS Plan</h1>
		<h2 class="package__subtitle"> The most popular choice of our customers.</h2>
		<p  class="package__info">Benefit....</p>
		</a>
	</section>

And style some more:

	.package__subtitle {
			color: #979797;
	}

	.package__info {
			padding: 16px;
			border: 1px solid #0e4f1f;
			font-size: 20px;
			color: #0e4f1f;
	}

Then we add id to the package sections, because they will get individual backgrounds:

	<section class="package" id="plus"> ...
	<section class="package" id="free"> ...
	<section class="package" class="premium"> ...
	
And yet more styling for the various packages:

	#plus {
			background: rgba(213, 255, 220, 0.95);
	}

	#free {
			background: rgba(234, 252, 237, 0.95);
	}

	#premium {
			background: rgba(14, 75, 30, 0.95);
	}

	#premium .package__title {
			color: white;
	}

	#premium .package__subtitle {
			color:#bbb;
	}

We'll also add effects when hovering over a package section:

	NB: You can apply hover effect on more than links elements!

	.package:hover,
	.package:active {
			box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
			border-color: #ff5454;
	}
	
        
---------------------------------------------------------------------------------------------------
Lecture 076 Adding "float" to our Package
---------------------------------------------------------------------------------------------------

We want to push the "free plan" section to ther right margin...

Actually, we can not use:
	text-align: right;
	
	This property only works with inline elements.

If we just add this - old-school floating style - to our #free section...
	float: right; 
	
	...inline element will float around it, but other block elements won't.
	
If really want to use this old-school property, we can use a "kludge":

	1. Add a div after the floated element:
		 <div class="clearfix"></div>
		 
	2. Apply CSS:  
		.clearfix { clear: both; }
		
		This makes element after the div behave normally, i.e. not flow around floated elements.
	
REMEMBER 
	
NB: The property "text-align" only works with inline elements
	
NB: Using floating for determinining the position of block elements relative to other block elements  has largely been replaced by new techniques such as FlexBox and CSS Grid.

NB: Floating is still used when controlling the flow of inline elements, such as text, around block elements, such as images.
	
Also, the floated "free" section now has no border on the left, hanging in the middle of the
page so we have to correct that, and the text-alignment:

	#free {
			background: rgba(234, 252, 237, 0.95);
			float: right;
			border-right: none;                <-- here
			border-left: 4px solid #0e4f1f;    <-- here
			text-align: right;                 <-- here
	}


---------------------------------------------------------------------------------------------------
Lecture 077 Fixing the Hover Effect
---------------------------------------------------------------------------------------------------

We have a small problem when we hover over the free section though:
The left border does not border follow the red styling we gave it earlier.
	
The #free id selector has a higher specificity than class or pesudo selectors,
such as our our ".package:hover" selector.

	#free {
		...
		border-left: 4px solid #0e4f1f;
	}

	Versus:
	
	.package:hover,
	.package:active {
		box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
		border-color: #ff5454;
	}

A clean fix would be to add:

	#free:hover,
	#free:active {
			border-color: #ff5454;
	}
	
A less clean way - which should be used sparingly - if at all - would be to
add "!important" to the previous hover style:	

	.package:hover,
	.package:active {
			box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
			border-color: #ff5454 !important;
	}

More on floating:
- https://developer.mozilla.org/en-US/docs/Web/CSS/float

---------------------------------------------------------------------------------------------------
Lecture 078 Adding the Final Touches
---------------------------------------------------------------------------------------------------	
	
Looking at the main page again we have some elemtns that our not centered.

The plans as a group are not centered on the page, so we fix that:

  <section id="plans">
  <h1 class="section-title">Select your plan!</h1>
  <div class="plans__list">                           <--- new class!

And:

	.plans__list {
			width: 80%;
			margin: auto;            <--- Center the whole div  (a block element)
			text-align: center;      <--- Center elements inside the div (block-inlne elements)
	}
            
---------------------------------------------------------------------------------------------------
SECTION 006 Positioning elements with CSS
---------------------------------------------------------------------------------------------------             

---------------------------------------------------------------------------------------------------
Lecture 080 Module Introduction
---------------------------------------------------------------------------------------------------
          
- Understanding the "position" property
- How to create fixed navigation bars with "fixed" value
- Positioning elements with z-index
- Using "absolute" and "relative" values stand-alone and combined
- "Sticky" positioning
- The "stacking context"

---------------------------------------------------------------------------------------------------
Lecture 081 Why Positioning will Improve our Website
---------------------------------------------------------------------------------------------------

Just a preview of what we will do in this section...

---------------------------------------------------------------------------------------------------
Lecture 082. Understanding Positioning - The Theory
---------------------------------------------------------------------------------------------------

Given a web page which look basically like this...

<html>              |    Document flow
	<body>            |
		<div></div      |
		<div></div      V
		<div></div
	</body>
</html>

What govern the flow of how these elements are displayed?

A default value for the "display" property  = block

A default value for the "position" property = static
Other values are:

	-  absolute  (= relative to "viewport" = visible part of the webpage)
	-  relative  (to some element)
	-  fixed 
	-  sticky
  
Concepts:

Document flow properties: 
	top, bottom, left, right

	NB: You will only see a change if the property position is other than static.
	
Position property contexts:
	viewport
	<html>
	<body>
	parent element
	
	
---------------------------------------------------------------------------------------------------
Lecture 083 Working with the "fixed" Value
---------------------------------------------------------------------------------------------------

We have a small html code here to learn about positioning:

	<!DOCTYPE html>
	<html lang="en">
			<head>
					<meta charset="UTF-8">
					<meta http-equiv="X-UA-Compatible" content="ie=edge">
					<link rel="stylesheet" href="main.css">
					<title>Position</title>
			</head>
			<body>
					<div class="parent">
							<div class="child-1">Navigation Bar</div>
							<div class="child-2">Background Image</div>
							<div class="child-3">Features</div>
					</div>
			</body>
	</html>


We have some css already to understand where these elements begin, end.

Then, we try changing the position of the first inner div:

	.parent .child-1 {
		top: 100px;
	}

The above makes no change at all. Why?

NB: Document flow properties (top, bottom, left, right) only affects elements with a property position other than "static".

If we change to:

	.parent .child-1 {
		position: fixed;
	}

	Notice:
	
	1) The 1st div shrinks in size to only contain the actual text
	
	2) The 1st div is taken out of the document flow: 
	
			- It's is fixed in place in its original position
			- The 2nd div moves up in the page as if the first div wasn't there.
     
  3) The fiv is shown above the second div.
  
	
If we add:

	.parent .child-1 {
		position: fixed;
		width: 400px;
		margin: 0;      <--- this
		top: 0;         <--- this
	}

	The div is moved up to the top edge of the browser viewport 
	- BUT in its original horizontal postion.
	

And if we change that to:
	bottom:0;

	The div is moved down to the bottom edge of the browser viewport
	- BUT in its original horizontal postion.
	
If we change that to:
	left:0;
	
	The div is moved to the left edge of the browser viewport
	- BUT in its original vertical postion.
	
Now, if we combine top and left properties...
	top: 0;
	left: 0;
	
	The div is moved to the left upper edge of the browser viewport

Using this last setting and change the width to 100%...

	.parent .child-1 {
		position: fixed;
		width: 100%;
		margin: 0;
		top: 0;
		left: 0;
	}		
		
We get a full width nav bar fixed at the top...

BUt there's a problem - the right border of the nav bar is out of the viewport!

We fix that with:
	box-sizing: border-box;
	
So far we have tried out the postioning properties with box elements.
What would happen if we made our nav bar inline?

It would still work basically the same way - position-wise.

---------------------------------------------------------------------------------------------------
Lecture 084 Creating a Fixed Navigation Bar
---------------------------------------------------------------------------------------------------

IF we go back to the main web page of our project and do this:

	.main-header {
			background: #2ddf5c;
			padding: 8px 16px;
			width: 100%;
			position: fixed;      <---- here
}

The nav bar is now fixed - but the contents below moves up under it.
- Due to it being moved out of the document flow.

If the nav bar was not already positioned at the top left, we might have included:

	top: 0;
	left: 0;

	And we can do that anyway.
	
--------------------------------------------------------------------------------------------------
Lecture 085 Using "position" to Add a Background Image
---------------------------------------------------------------------------------------------------

We'll add a div and a new class in our packages html:

<body>
    <div class="background"></div>
    ...
    
A new subfolder in the shared main folder:
	../images
	
And a new image in that:
	../images/plans-background.jpg
	
If we then try to style the div with class "background":

	.background {
			background: url("../images/plans-background.jpg");
			width: 100%;
			height: 100%;
	}

	This does not work at all. So we try:
	
	.background {
			background: url("../images/plans-background.jpg");
			width: 500px;
			height: 500px;
	}	

	This creates a div with a background, vertically above our first plan "box".	So we add:
	position: fixed;
	
	Now the picture is superimposed on top of the plan divs which is below it in the document flow.
	It has been take out of the flow itself, so hte others mov up and takes its place.
	
	It is superimposed above the elements coming below in the document flow, because it comes 
	before them in the html file.
	
	We restore the width and height to 100%:
	
	background {
			background: url("../images/plans-background.jpg");
			width: 100%;
			height: 100%;
			position: fixed;
	}

	The background now actually covers all other content, but it is shown in its original size
	and is cropped of by the viewport of the browser when we make the window smaller.
	
--------------------------------------------------------------------------------------------------
Lecture 086 Understanding the Z-Index
---------------------------------------------------------------------------------------------------	
	
So far we have moved elements around on the x and y axis, i.e. left-and-right and up.and-down.
To make this background image appear below the content on the z-axis, i.e. make it have their
normal position of a background image, we need a new propery: z-index

The z-index property:
	- Default value: auto | 0
	- Only applies to elements with a position property != static
	
To place an element above another element with a default z-index:
	- Give it a higher, positive value
	
To place an element below another element with a default z-index:
	- Give it a lower, negative value
	
If two elements has the same value, the one that comes before the other in the hmtl file
covers the other.
	
The background has the position property so let's give it:
	z-index: -1;
	
--------------------------------------------------------------------------------------------------
Lecture 088 Styling & Positioning our Badge with "absolute" and "relative"
---------------------------------------------------------------------------------------------------		

Let's add a h2 element to our PLus package to be obvious about which is recommended:

	<a href="#">
	<h1 class="package__title">Our PLUS Plan</h1>
	<h2 class="package__badge">RECOMMENDED</h2>       <--- here!
	<h2 class="package__subtitle"> The most popular choice of our customers.</h2>
	<p  class="package__info">Benefit from increased storage...</p>
	</a>

We want to move it to hte right upper corner... 

But we can not use "position: fixed" now,
	we don't want to position it relative to the viewport edges.
	we want to position it relative to the parent element, and its upper right corner

If we use "position: absolut"...
	The left, right, top, bottom properties are applied relative to a parent element with
	a position property applied, or if none has that, the html element.
	
So we add this to the parent element - our plan div:

	.package {
			width: 80%;
			margin: 16px 0;
			border: 4px solid green;
			border-left: none;
			position: relative;        <--- here
	}

NB: position: relative

    The element is positioned according to the normal flow of the document, and then offset relative
    to itself based on the values of top, right, bottom, and left. The offset does not affect the 
    position of any other elements;
    
And then use position: absolute for our badge inside it:

	.package__badge {
			position: absolute;        <--- here
			top: 0;
			left: 400px;
			margin: 20px;
			font-size: 12px;
			color: white;
			background: #ff5454;
	}

NB: position: absolute

	  The element is removed from the normal document flow, and no space is created for the element in 
	  the page layout. It is positioned relative to its closest positioned ancestor, if any; 
	  otherwise, it is placed relative to the initial containing block.
	  
NB:  A "positioned element"

		is an element whose computed position value is either relative, absolute, fixed, or sticky.
		In other words, it's anything except static.
	
More on the position property:
- https://developer.mozilla.org/en-US/docs/Web/CSS/position	
 	
The position is not too good though...

Instead of using "left: 400px" putting the badge 400px from the left side of the plan div,
leẗ́s position it 40px from the right instead.

.package__badge {
    position: absolute;
    top: 0;
    right: 40px;
    margin: 20px;
    padding: 10px;
    font-size: 12px;
    color: white;
    background: #ff5454;
}

However when we scroll our content - it covers the nav bar, so we fix that:

	main-header {
			background: #2ddf5c;
			padding: 8px 16px;
			width: 100%;
			position: fixed;
			top: 0;
			left: 0;
			z-index: 1;      <-- like so
	}

Actually the first package div has its upper border covered by the nva bar so I will
move it down a bit using:

	top: 40px:
	
--------------------------------------------------------------------------------------------------
Lecture 089 Diving Deeper into Relative Positioning
---------------------------------------------------------------------------------------------------	

Some theory again using our demo html code:

	<!DOCTYPE html>
	<html lang="en">
			<head>
					<meta charset="UTF-8">
					<meta http-equiv="X-UA-Compatible" content="ie=edge">
					<link rel="stylesheet" href="main.css">
					<title>Position</title>
			</head>
			<body>
					<div class="parent">
							<div class="child-1">Navigation Bar</div>
							<div class="child-2">Background Image</div>
							<div class="child-3">Features</div>
					</div>
			</body>
	</html>
	
And we use the css:

	.parent .child-1 {
		position: relative;
	}

Nothing changes... But if we add:

	  left: 50px;
		top: 50px;
		
We move the first div 50x from the left and from the top, relative to its own original position.
The positioning context is the element itself!

We also see that it stick out from - or overflows - its container div.
Not usually what you want, but sometimes.

--------------------------------------------------------------------------------------------------
Lecture 090 Working with "overflow" and Relative Positioning
---------------------------------------------------------------------------------------------------	

To avoid having an element that is positioned to overflow, or move outside its parent
we can apply "overflow: hidden" to the parent:

.parent {
    background: white;
    padding: 20px;
    border: 5px solid black;
    margin: 0;
    overflow:  hidden;          <--- here
}

Although that is not usually the solution...

NB: 

	By default we can not apply "overflow:  hidden;" to the BODY element alone.
	We have to aplly to both BODY + HTML elements in that case.
	
	
--------------------------------------------------------------------------------------------------
Lecture 091 Introducing "sticky" Positioning
---------------------------------------------------------------------------------------------------	

We have some new html:

	<!DOCTYPE html>
	<html lang="en">
			<head>
					<meta charset="UTF-8">
					<meta http-equiv="X-UA-Compatible" content="ie=edge">
					<link rel="stylesheet" href="main.css">
					<title>Position</title>
			</head>
			<body>
					<div class="parent">
							<div class="country">USA</div>
							<div class="cities">San Francisco</div>
							<div class="cities">New York</div>
					</div>
					<div class="parent">
							<div class="country">France</div>
							<div class="cities">Nice</div>
							<div class="cities">Paris</div>
					</div>
					<div class="parent">
							<div class="country">Germany</div>
							<div class="cities">Berlin</div>
							<div class="cities">Munich</div>
					</div>
			</body>
	</html>

And inital css:

	html {
			/*background: #b3b3b3;
			padding: 15px;
			border: 5px solid white;
			margin: 15px;*/
			height: 2000px;
	}

	body {
			/*background: #fa923f;
			padding: 20px;
			border: 5px solid black;*/
			margin: 0;
		}
		
	.parent {
			background: white;
			padding: 20px;
			/*border: 5px solid black;*/
			margin: 10px;
		}

	.parent .country {
			background: #fa923f;
			color: white;
			padding: 10px;
			border: 5px solid black;
			margin: 10px;
	}
		
	.parent .cities {
			background: rgb(105, 105, 109);
			color: white;
			padding: 10px;
			border: 5px solid black;
			margin: 10px;
	}


If we add "position: sticky" to the country div...

	.parent .country {
		...
		position: sticky;
	}

	Nothing changes.
	
And if we add "top: 20px;" we get...

.parent .country {
    background: #fa923f;
    color: white;
    padding: 10px;
    border: 5px solid black;
    margin: 10px;
    position: sticky;
    top: 20px;
}

Using "position: sticky" is a combination of relative and fixed.
- If scroll the page the element sticks when it reaches the edge of the viewport minus 20 pixels.
- If we continue to scroll it remains "sticky" until we scroll past the content of its parent element.

To see this moreclearly we change the css thus:

	html {
			background: #b3b3b3;
			padding: 15px;
			border: 5px solid white;
			margin: 15px;
			height: 2000px;
	}

	body {
			background: #fa923f;
			padding: 20px;
			border: 5px solid black;
			margin: 0;
		}
		
	.parent {
			background: white;
			padding: 20px;
			border: 5px solid black;
			margin: 10px;
		}
		

However sticky may not be supported on older browsers... But who uses old browesers?
- https://caniuse.com/#search=sticky


---------------------------------------------------------------------------------------------------
Lecture 092 Understanding the Stacking Context
---------------------------------------------------------------------------------------------------	

Each fixed element constitutes it own "stacking context"

So, elements inside a "position: fixed" element...
- Can only compete with z-index between themselves, regarding which is on top of each other.
- Can never be "better" than their parent stackin-wise

	<!DOCTYPE html>
	<html lang="en">
			<head>
					<meta charset="UTF-8">
					<meta http-equiv="X-UA-Compatible" content="ie=edge">
					<link rel="stylesheet" href="main.css">
					<title>Position</title>
			</head>
			<body>
					<div class="navigation">navigation</div>        <-- css: position: fixed;
					<div class="headline">headline                  <-- css: position: fixed;
					
							<div class="image-1">image-1</div>          <-- css: z-index: 3;
							<div class="image-2">image-2</div>          <-- css: z-index: 2;
							<div class="image-3">image-3</div>          <-- css: z-index: 1;
							
					</div>
					<div class="contact-us">contact-us</div>        <-- css: position: fixed;
			</body>
	</html>


---------------------------------------------------------------------------------------------------
Lecture 094 Useful Resources & Links
---------------------------------------------------------------------------------------------------	

Positioning theory: 
https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning

More about the "position" property: 
https://developer.mozilla.org/en-US/docs/Web/CSS/position

The z-index: 
https://developer.mozilla.org/en-US/docs/Web/CSS/z-index

The Stacking Context: 
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context

The "sticky" value and current browser support: 
https://caniuse.com

---------------------------------------------------------------------------------------------------
SECTION 007 Understanding Background Images & Images
---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
Lecture 097. Understanding "background-size"
---------------------------------------------------------------------------------------------------

Up til now we have used the short hands:

#product-overview { ...

	background: url("freedom.jpg");    -- OR --
	background: red;

But we can define both a background color and an image:

	background-image: url("freedom.jpg");
	background-color: red;
	
In this case the image will be on top of the color.

We also want to position the background picture a little better
- We don't see more trhan a fractrion of it right now.

Just to experiment, we could use:
	background-size: 100px: 
	
	The background imaghe would be a repeated image of 100px, so many small ones.
	
If we use:
	background-repeat: no-repeat;   - we get one smal picture only

	If we use:
	background-repeat: repeat-x;    - the picture is repeated only on the x-axis
	background-repeat: repeat-y;    - the picture is repeated only on the y-axis
		
	If we increase th size:
	background-size: 300px;         - it look slighly better - but is still way to small
	
	If we use 2 values
	background-size: 300px 100px;   - The picture is forced into those XxY dimensions - ignoring aspect
	
	We can use percentages:
	background-size: 50%;           - Picture covers half of the page
	background-size: 100%;          - Picture covers whole page
	
	We can use 2 percentages:
	background-size: 100% 30%;      - And again the picture is warped out of its normal aspect ratio ration.
	
	We can use auto + 1 percentage:
	background-size: auto 100%;     - Picture fills height - and width according to aspect ratio (auto).
	
	We can also use:                - Fills the entire container:
	background-size: cover;         -- "auto 100%" if picture has portrait aspect
	                                -- "100% auto" if picture has lanscape aspect
	                              
	We can also use:                - Fills as much of the entire container it can... 
	background-size: contain;       -- without cropping the picture
	                                -- again, with regard to landscape/portrait
	
---------------------------------------------------------------------------------------------------
Lecture 098 Working with "background-position"
---------------------------------------------------------------------------------------------------

We don't like the position of the image - we want to focus on the woman in the picture:

Let's position the background image with px units:

		background-position: 20px;         - Picture is moved 20px from the left of the container
		background-position: 20px 50px;    - Picture is moved 20px from the left and 50 from the top

Let's position the background image with percentages:

		With 1 value: How many percent of overflow should be cropped on the left?
		With 2 value: How many percent of overflow should be cropped on the left & at the top
		
		background-position: 20%;          - Overflow is cropped 20% from the left 
		                                   - But we have no overflow due to "background-size: cover"
		=                                   
    background-position: 20% 50%;	     = 50% from top and bottom is the default
		                                   
		background-position: 0% 10%;       - Picture not cropped horizontally - we have no overflow
                                       - but 10% from the top if necessary - and 90% from bottom
		                                  
		If we want to crop it equally on left/right and top/bottom we can use:
		background-position: 50% 50%;   -- OR --
		background-position: center;
		
		If don't want to crop it on left or the top:
		background-position: left top;
		background-position: 0% 0%;
		
		If we want to crop it on 10% left and 20% of the bottom:
		background-position: left 10% bottom 20%;
		
		Le't use that!

So now we have:

	#product-overview { 
			background-image: url("freedom.jpg");
			background-size: cover;
			background-position: left 10% bottom 20%;
			background-repeat: no-repeat;
			width: 100%;
			height: 528px;
			padding: 10px;
			margin-top: 43px;
			position: relative;
	}
		
---------------------------------------------------------------------------------------------------
Lecture 099 The "background" Shorthand - Theory
---------------------------------------------------------------------------------------------------		
		
The background property is a shorthand propterty:

Behind it there are several more specific properties:

- bakground-color         

- background-image        Set one - or more - background images
- background-repeat       Set how images are repeated if too small to fill browser window
- background-size
- background-position     Set initial position, relative to the background position layer.
- background-origin       Set bakground positioning area - relevant to images    

- background-clip         Set whether the background in clipped by the border or goes beneath it
- background-attachment   Set how a background image is affected by scrolling


---------------------------------------------------------------------------------------------------
Lecture 100 Applying "background" Origin, Clip & Attachment
---------------------------------------------------------------------------------------------------		

Let's delve deeper into some of these properties:

background-origin       Set bakground positioning area - relevant to images    
-----------------

#product-overview { 
     background-image: url("freedom.jpg");
     background-size: cover;
     background-position: left 10% bottom 20%;
     background-repeat: no-repeat;
     width: 100%;
     height: 528px;
     padding: 10px;
     margin-top: 43px;
     border: 5px dashed red;  <---- Add this!
}

When we do this:

- We get the dashed border, ok!
- On the sides we see white padding in the gaps of the dashed border
- On the top and bottom we see the image in the border gaps
- Because the bg image is scaled/cropped vertically and that happens after the border.

Now if we specify:
	
	#product-overview { 
	background-origin: border-box;
	
	-	Perfect, now the image goes under the border and shows in the gapsd all around!
	- We have defined the container for our image.
	- So "border-box" means = fill background including border and padding. 	

If we specify:
	
	#product-overview { 
	background-origin: content-box;

	- Now the image is shown under the gaps top and bottom
	- But on the sides the image does not even reach the border, we have white padding inside the border.
	- So "content-box" means = fill background except border and padding. 

If we specify the DEFAULT value of...
	
	#product-overview { 
	background-origin: padding-box;
	
	- Now the image goes under the padding but not the border.
	- So "padding-box" means = fill background including padding but not the border

Let's restore this to the best value, in our case:
	
	#product-overview { 
	background-origin: border-box;

REMEMBER:

- When excess parts of a bg image is automatically cropped due to scaling,
  the affected side of the image - by default - extend underneath the border .
  
- This can be overridden by the property "background-clip"...


background-clip         Set whether the background in clipped by the border or goes beneath it
-----------------

So, if we specify:

	#product-overview { 
	background-origin: border-box;
	background-clip: padding-box;
	
 - The image is clipped inside the border - but covering any padding - on all sides
 
If we specify:

	#product-overview { 
	background-origin: border-box;
	background-clip: content-box;
	
 - The image is clipped inside the border - and inside any padding - on all sides.

Let's restore this to the best value, in our case:
	
	#product-overview { 
	background-origin: border-box;
  background-clip: border-box;
 

Then we have...

background-attachment   Set how a background image is affected by scrolling
---------------------

This property...

Specifies whether the background images are fixed with regard to the viewport ('fixed'),
or scroll along with the element ('scroll') or its contents ('local').
  
- "fixed"   Image is fixed relative to the viewport.
- "local"   Image is fixed relative to the content.
- "scroll"  Image is fixed relative to the element itself and does not scroll with its contents.

Ref: https://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment

We'll just set the property to the default here just to make it cleare which one is used:
     background-attachment: local;
     
---------------------------------------------------------------------------------------------------
Lecture 101 Using the "background" Shorthand on our Project
---------------------------------------------------------------------------------------------------

Up till now we have these background properties set:

#product-overview { 
     background-image: url("images/freedom.jpg");
     background-size: cover;
     background-position: left 10% bottom 20%;
     background-repeat: no-repeat;
     background-origin: border-box;
     background-clip: padding-box;
     background-attachment: local;
     ...
}
     
How can we make this shorter? ME: Do we really want to?

We can combine these:

     background-image: url("images/freedom.jpg");
     background-size: cover;
     background-position: left 10% bottom 20%;
     
Into:

     background-image: url("images/freedom.jpg") left 10% bottom 20%/cover;
     
---------------------------------------------------------------------------------------------------
Lecture 102 Styling images
---------------------------------------------------------------------------------------------------

We'll replace the text uHost with an image:

<div>
        <a href="index.html" class="main-header__brand">
           uHost
        </a>
 </div>

<div>
        <a href="index.html" class="main-header__brand">
           <img src="images/uhost-icon.png" alt="uHost - Your favorite hosting company"
        </a>
 </div>

- We place a new image in the images folder: mages/uhost-icon.png.
- We also moverd the freedom.jpg image there.

Ooh, it's a bit big, though!

If we in shred.ccs add:

.main-header__brand {
    color: #0e4f1f;
    text-decoration: none;
    font-weight: bold;
    font-size: 22px;
    height: 22px;      <--- here
}

This has no effect at all:
By default - the image is not limited to the height property of an inline containing element,
like our an a(nchor) element but will use the height an width it needs for its original size.

What if we specifically style the image? 

.main-header__brand  img{
   height: 22px;
}

Yay, that works! Now it's 22px!

What if set it to 100% - of the height offered by the container?

.main-header__brand  img{
   height: 100%;
}

NO, it's big again! It will use 100% of its own height!

NB: This is due to the fact that the containing element is an INLINE element!
NB: An image does not respect the  height and width properties of an inline container element.

So, if we force our a element to become a block element, like:
.main-header__brand {
    color: #0e4f1f;
    text-decoration: none;
    font-weight: bold;
    font-size: 22px;
    height: 22px;
    display: inline-block;
}

Then we just tell our image to assume 100% of its containers height:

.main-header__brand  img{
   height: 100%;
}

YAY, it works!

---------------------------------------------------------------------------------------------------
Lecture 103 Adding the Customers Page to our Website
---------------------------------------------------------------------------------------------------

Let's add a customers page:

customers/
	customers.css
	index.html

images/
	customer1.jpg
	customer2.jpg

We will copy the header section from out main page index.html...
And we will have to modify the relative paths of links and image references.

We test the customers-link from the main page and it works!
That done, we can continue to next lesson...

---------------------------------------------------------------------------------------------------
Lecture 104 Working on the Image Layout
---------------------------------------------------------------------------------------------------

For the firat restimonial we have a pseudo-property - first-of-type like:

.testimonial:first-of-type {
    margin-top: 96px;
  }

...so we can style things specifically for that element.

We will create 2 classes for the different parts of the testimonial:

  .testimonial:first-of-type {
    margin-top: 96px;
  }
  
  .testimonial__image-container {
    width: 100%;
    display: inline-block;
  }

NB: The double underscore notation following the BEM notatin style.


We add a box-shadow for the image container:
box-shadow: 3px 3px 5px 3px rgba(0,0,0,0.3);

I can see a thin line of white space at the bottom of the image.

The bottom whitespace is solved by using this on the image css:
vertical-align: top; 

Why, I don't understand.

---------------------------------------------------------------------------------------------------
Lecture 105 Understanding Linear Gradients
---------------------------------------------------------------------------------------------------

Let's try a linear gradient in stead of our main background picture:

A simple gradient in red to blue, top-to-bottom:
#product-overview { 
     background-image: linear-gradient(red, blue);

NB: The first value is the direction, and like we saw, by default it is:
	"to bottom" = top-to-bottom

Another value would be:
	"to left bottom" = direction from upper right to left bottom

We can use an angle:
	"30deg" = look much like "to left bottom"
	"0deg"  = "to top"
	"180deg = "to bottom"  (default)

You can use colors, rgb hexcodes, "transparent", or degrees of tranparency using rgba(a,b,c,d):
	background-image: linear-gradient( red, blue, green, yellow, orange, #fa923f, transparent, rgba(0,0,0,0.5));

You can also control when different colors start and stop:

/* Color stop: A gradient from bottom to top, starting blue, turning green at 40% of its length, finishing red */
linear-gradient(0deg, blue, green 40%, red);

/* Color hint: A gradient going from the left to right, starting red, getting to the midpoint color 10% of the way
 across the length of the gradient, taking the rest of the 90% of the length to change to blue */ 
linear-gradient(.25turn, red, 10%, blue);

/* Multi-position color stop: A gradient tilted 45 degrees, with a red bottom-left half and a blue top-right half, 
   with a hard line where the gradient changes from red to blue */
linear-gradient(45deg, red 0 50%, blue 50% 100%);

More: https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient

---------------------------------------------------------------------------------------------------
Lecture 106 Applying Radial Gradients
---------------------------------------------------------------------------------------------------

This creates a centered red ellipse in the middle of a blue background;
	background: radial-gradient(red, blue)

This creates a centered red circle in the middle of a blue background;
	background: radial-gradient(circle, red, blue)

This creates a red circle with its center at the top, in a blue background;
	background: radial-gradient(circle at top, red, blue)

This creates a red circle with its center at the top left, in  a blue background;
	background: radial-gradient(circle at top left, red, blue)

This creates a red circle with its center 20% from the left and 50% down from the top, in a blue background;
	background: radial-gradient(circle at top left, red, blue)

Add size value...

This creates a 20px wide red circle centered 20% from the left and 50% from the top, in a blue background;
	background-image: radial-gradient(circle 20px at top left, red, blue)

You can also use the same typoe of color start and stop as for linear gradients.

---------------------------------------------------------------------------------------------------
Lecture 107 Stacking Multiple Backgrounds
---------------------------------------------------------------------------------------------------

You can use multiple images:

- url()
- linear-gradient()
- radial-gradient,
- rgba() 

However...

NB: Only ONE solid background color may be used, like red, blue etc.
NB: The solid color will be at the bottom of images, gradients and so on.

So we can do this:

background: linear-gradient(to top,rgba(80,68,18,0.6) 10%, transparent), url("images/freedom.jpg") left 10% bottom 20%/cover no-repeat border-box, red;

- At the top we have a semi-transparent gradient.
- Then we have our old picture under that
- And we have red as a backup color if the browser was unable to load he image.

NB: Each gradient, image and solid color are separated by a comma (,).

---------------------------------------------------------------------------------------------------
Lecture 108 Understanding Filters
---------------------------------------------------------------------------------------------------

What is a filter?

Given html: 
	<div></div>

And css - producing a brown rectangle:
	div {
		background: brown;
	}

We can then add a filter like blur() to blur the whole box:

	div {
		background: brown;
		filter: blur(10px);
	}

Other filters are:

	filter: blur(5px);
	filter: brightness(0.4);
	filter: contrast(200%);
	filter: drop-shadow(16px 16px 20px blue);
	filter: grayscale(50%);
	filter: hue-rotate(90deg);
	filter: invert(75%);
	filter: opacity(25%);
	filter: saturate(30%);
	filter: sepia(60%);

Let play with the packages page:

.background {
    background: url("../images/plans-background.jpg");
    background: url("../images/plans-background.jpg") center/cover;  <--- Add this

More: https://developer.mozilla.org/en-US/docs/Web/CSS/filter

---------------------------------------------------------------------------------------------------
Lecture 109 Adding & Styling SVGs - The Basics
---------------------------------------------------------------------------------------------------

Let's add some svg graphics -encloed as a resource - On our main page:

<div class="key-feature__image">
    <svg viewBox="0 0 512 512">
        <path style="fill:#8E9AA9;" d="M168,200c-4.418,0-8,3.582-8,8v120h-17.376c-3.302-9.311-12.194-16-22.624-16  c-13.234,0-24,10.767-24,24s10.766,24,24,24c10.429,0,19.321-6.689,22.624-16H168c4.418,0,8-3.582,8-8V208  C176,203.582,172.418,200,168,200z"
        />
	...

Add all three images... And then code the css:

.key-feature__image {
    background: #ffcede;
    width: 128px;
    height: 128px;
    border: 2px solid #424242;
    border-radius: 50%;
    margin: auto;
	padding: 20px;   <--- add this
}

MORE:

Backgrounds    : https://developer.mozilla.org/en-US/docs/Web/CSS/background
Styling Images : https://www.w3schools.com/css/css3_images.asp
Filters        : https://developer.mozilla.org/en-US/docs/Web/CSS/filter
Styling SVG    : https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/SVG_and_CSS


---------------------------------------------------------------------------------------------------
SECTION 008 Sized and Units
---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
Lecture 112 Module Introduction
---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
Lecture 125 Understanding the Viewport Units "vw" &"vh"
---------------------------------------------------------------------------------------------------

What are vw and vh?

vw = viewport width  = the width of the area where the browser shows html content 
vh = viewport height = the height of the area where the browser shows html content 

These values are equal:
width: 100%   = width: 100vw;
height: 100%  = height: 100vh;

vmin = the wifth or height of the browser window - whichever is smaller
vmax = the wifth or height of the browser window - whichever is larger

Let's use this for our backdrop:

.backdrop {
    position: fixed;
    xdisplay: none;
    top: 0;
    left: 0;
    z-index: 100;
    width: 100vw;
    height: 100vw;
    background: rgba(0,0,0,0.5);
}

For our background image - the woman tanning in the sun:

We change:

#product-overview {
  background: linear-gradient(to top, rgba(80, 68, 18, 0.6) 10%, transparent), url("images/freedom.jpg")
			left 10% bottom 20%/cover no-repeat border-box, #ff1b68;
  width: 100%;
  height: 528px;
  margin-top: 2.75rem;
  position: relative;
}

#product-overview {
  background: linear-gradient(to top, rgba(80, 68, 18, 0.6) 10%, transparent),
    url("images/freedom.jpg") left 10% bottom 70%/cover no-repeat border-box,  #ff1b68;   <-- bottom 70%
  width: 100vw;                    <--- here
  height: 33vh;                    <--- here
  margin-top: 2.75rem;
  /* border: 5px dashed red; */
  position: relative;
}

---------------------------------------------------------------------------------------------------
Lecture 127 Choosing the Right Unit
---------------------------------------------------------------------------------------------------

PROPERTY                                RECOMMENDED UNIT
--------                                ----------------
font-size (root element)                % | -
font-size                               rem

padding, margin                         rem
border                                  px

width                                   %, vw
height                                  %, vh

top                                     % (relative to containg block)
bottom                                  % (relative to containg block)
left                                    % (relative to containg block)
right                                   % (relative to containg block)


---------------------------------------------------------------------------------------------------
Lecture 128 Using "auto" to Center
---------------------------------------------------------------------------------------------------

We have already used this but let's rehash:

.plan__list {
  width: 80%;
  margin: auto;
  text-align: center;
}

- By using "margin: auto;" we can center a block-level element, relative to its containing element.
- Above we center a div containing our three plans.
- NB: This technique can only be used for block elements with an explicit width!

- Inside the div we also want the elements centered so we use "text-align: center;"

---------------------------------------------------------------------------------------------------
Lecture 129 Cleaning Up our Code
---------------------------------------------------------------------------------------------------

packages.css:

.background {
    background: url("../images/plans-background.jpg") center/cover;
    filter: grayscale(60%);
    width: 100%;  --> 100vw;
    height: 100%; --> 100vh;
    position: fixed;
    z-index: -1;
}









---------------------------------------------------------------------------------------------------
SECTION 009 Working with JavaScript & CSS
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
Lecture 132 Module Introduction
---------------------------------------------------------------------------------------------------

Why do we need Javascript for CSS?

- Sometimes content needs to be changed AFTER a oage has loaded.

We'll learn how to....

- Manipulate styles via JS
- Adding & Removing CSS classes via JS

---------------------------------------------------------------------------------------------------
Lecture 133 Adding a Modal
---------------------------------------------------------------------------------------------------

A modal is a state when the page is in a specific mode, like when you get a pop-up and the 
background is shown grayed-out or dimmed or something like that.

The background of the modal in the html will be:

		<body>
    <div class="backdrop"></div>

Followed by modal pop-up:

	 <div class="modal">
      <h1 class="modal__title">Do you want to continue?</h1>
      <div class="modal__actions">
         <a href="start-hosting/index.html" class="modal__action">Yes!</a>
         <button class="modal__action modal__action--negative" type="button">No!</button>
      </div>
   </div>
    
And the css in the main.css code:

We will only display the modal when a certain button is clicked so the display property is set to "none" by default.
We will control this with javascript...


	.modal {
		position: fixed;
		display: none;         <--- NB: By default the modal is not diplayed.
		z-index: 200;          <--- NB: The pop-up should be on-top of all other content!
		top: 20%;
		left: 30%;
		width: 40%;
		background: white;
		padding: 1rem;
		border: 1px solid #ccc;
		box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.5);
	}

The rest of the css looks like:

	.modal__title {
		text-align: center;
		margin: 0 0 1rem 0;
	}

	.modal__actions {
		text-align: center;
	}

	.modal__action {
		border: 1px solid #0e4f1f;
		background: #0e4f1f;
		text-decoration: none;
		color: white;
		font: inherit;
		padding: 0.5rem 1rem;
		cursor: pointer;
	}

	.modal__action:hover,
	.modal__action:active {
		background: #2ddf5c;
		border-color: #2ddf5c;
	}

	.modal__action--negative {
		background: red;
		border-color: red;
	}

	.modal__action--negative:hover,
	.modal__action--negative:active {
		background: #ff5454;
		border-color: #ff5454;
	}    


---------------------------------------------------------------------------------------------------
Lecture 134. Selecting & Manipulating Styles with JavaScript
---------------------------------------------------------------------------------------------------

So we want to control the value of the display property with JS, like in this css code:

.modal {
  display: none;

Why? Because it's the only way we can change the content after the page has loaded.

How do we control style with JS in general?  

Where do place the code?

- We can put it in the header section, or at the beginning or end of the body section.

- One of the better ways is to put it in the end of the body section, so all the html tree has been parsed,
  and is available to the JS code. Contained in the <script></script> tags.
  
- Even better is usually to put it in a separate file. We'll put our in the main dir of our project.
- Let's call it: shared.js
- We then include a reference to that script at the end of the body element using: 

	<script src="shared.js"></script>
	</body>
  
We can try it using, this js code in shared.js:
	alert('This works!');
	
Accessing the css style of our webpage is a 2-step process:

	1. Get access to a so-called DOM (Document Object Nodel) element.

		The DOM is the whole hiearchical tree model of our html code basically.
		
	2. Change the element's properties, attributes or whatever we want to do.

So how do we select the backdrop div e.g. if we want to change it?

- Much like you do in CSS: By element type, id, attributes, etc.

First, we create a varibel to refer to the DOM element:
	var backdrop = document.querySelector('.backdrop')

	document                          = contains the whole document
	.querySelector('SOME-CSS-SYNTAX') = choose an element choosing CSS syntax
	
We can debug what we just selected using:
	console.log(backdrop;

To see what it outputs in Firefox:
	- Rightclick on the webpage and choose "Inspect element"
	- Then choose the log tab.
	
It says:
	<div class="backdrop">
	
If we chnage that to:
	console.dir(backdrop;
	
You will see the output in DOM "object notation":
	div.backdrop
	
NB: 
- The class selector function .querySelector() always selects just ONE element. 
- The first element that matches a class specification.

ASIDE:
----------------------------------------------------------------------------
	If you need to get access to several elements in an array:
	-	Use: .querySelectorAll()
	- It returns all elements matching the class you specify.

	In this later case, we get an array - NodeList - with several elements.
-----------------------------------------------------------------------------

If we look at the output of the console.dir(backdrop; call, we can find:

	- The "style" property - it contains all the inline css properties of our div element.
	- Note that: These are inline css properties
	
So we can code:

	backdrop.style.display = 'block';
	
...to access the display pproperty of the div backdrop element.

And if we reload, the js code will set the display property to block and the backdrop will
cover the page right away.

But we want it to just display we we click a certain button, which next lesson will show.


---------------------------------------------------------------------------------------------------
Lecture 135 Adding an Event Listener
---------------------------------------------------------------------------------------------------

NOw, we don't want the modal pop-up to show until we press a button, so to do that we need
to run the JS code when an event occurs, like when a button is clicked.

We have such a button in our main index.html file:

	<button class="button">CHOOSE PLAN</button>	
	
And in our JS code we need to select the buttons availble on the main page:

	var selectPlanButtons = document.querySelectorAll('.plan button');
	
	console.dir(selectPlanButtons);
	
	NB: We select all button element that are inside an element with the plan class. And log that...
	
And in the browser ispector we can see:

	NodeList(3)
	0: <button class="button">​
	1: <button class="button">​
	2: <button class="button">
	length: 3
	
To display a pop-up/modal with JS code when a button is clicked we need to loop through these 3 buttons
and add an Event Listener to each button. An event listener that will execute a function the button is pressed.

- This function will set the display property of our modal element to "block" instead of "none".
- The modal wil pop-up with a question "Do you want to continue"
- And the backdrop element will darken the background.

	for (var i = 0; i < selectPlanButtons.length; i++) {
			selectPlanButtons[i].addEventListener('click', function() {
					modal.style.display    = 'block';
					backdrop.style.display = 'block';
			});
	}
	
---------------------------------------------------------------------------------------------------
Lecture 136 Adding a Side Navigation Bar
---------------------------------------------------------------------------------------------------

We are adding this to the index.html - after </header> - and before <main>:

   <nav class="mobile-nav">
        <ul class="mobile-nav__items">
            <li class="mobile-nav__item">
                <a href="packages/index.html">Packages</a>
            </li>
            <li class="mobile-nav__item">
                <a href="customers/index.html">Customers</a>
            </li>
            <li class="mobile-nav__item mobile-nav__item--cta">
                <a href="start-hosting/index.html">Start Hosting</a>
            </li>
        </ul>
    </nav>	
	
And this to the shared.css file:

	.mobile-nav {
		display: none;
		position: fixed;
		z-index: 101;
		top: 0;
		left: 0;
		background: white;
		width: 80%;
		height: 100vh;
	}

	.mobile-nav__items {
		width: 90%;
		height: 100%;
		list-style: none;
		margin: 10% auto;
		padding: 0;
		text-align: center;
	}

	.mobile-nav__item {
		margin: 1rem 0;
	}

	.mobile-nav__item a {
		font-size: 1.5rem;
	}


	We also need to copy some previous link styles to our new side nav code.
	
	Frrom:
	
	.main-nav__item a {
    text-decoration: none;
    color: #0e4f1f;
    font-weight: bold;
    padding: 0.2rem 0;
	}

To:

	.main-nav__item a,
	.mobile-nav__item a {            <-- add
			text-decoration: none;
			color: #0e4f1f;
			font-weight: bold;
			padding: 0.2rem 0;
	}

Likewise:

.main-nav__item--cta a,
.mobile-nav__item--cta a {        <-- add
    color: white;
    background: #ff1b68;
    padding: 0.5rem 1rem;
    border-radius: 8px;
}

And also:

	.main-nav__item--cta a:hover,
	.main-nav__item--cta a:active,
	.mobile-nav__item--cta a:hover,
	.mobile-nav__item--cta a:active {
			color: #ff1b68;
			background: white;
			border: none;
	}

If we save and refreshnow we will not see any difference due to:

	.mobile-nav {
			display: none;
	
But if we remove that, for now...

-	We will see a big side menu covering 75% pf the page from the left.
-	But the PAckages, Customers and Start Hosting links look ok.
	
But restore to code below again:	
	
	.mobile-nav {
			display: none;

We want to show thsi menu at the click of a button, so will add this code:

	<button class="toggle-button">
    <span class="toggle-button__bar"></span>
    <span class="toggle-button__bar"></span>
    <span class="toggle-button__bar"></span>
</button>

Here:

    <header class="main-header">
                     <---- here
        <div>
            <a href="index.html" class="main-header__brand">
                <img src="images/uhost-icon.png" alt="uHost - Your favorite hosting company">
            </a>
        </div>
        
Like so:

    <header class="main-header">
        <div>
        
            <button class="toggle-button">
                <span class="toggle-button__bar"></span>
                <span class="toggle-button__bar"></span>
                <span class="toggle-button__bar"></span>
            </button>
            
            <a href="index.html" class="main-header__brand">
                <img src="images/uhost-icon.png" alt="uHost - Your favorite hosting company">
            </a>
        </div>

And this css code in shared.css        

	.toggle-button {
		width: 3rem;
		background: transparent;
		border: none;
		cursor: pointer;
		padding-top: 0;
		padding-bottom: 0;
		vertical-align: middle;
	}

	.toggle-button:focus {
		outline: none;
	}

	.toggle-button__bar {
		width: 100%;
		height: 0.2rem;
		background: black;
		display: block;
		margin: 0.6rem 0;
	}

We also change:

	.main-nav {
	...
	width: calc(100% - 122px);
    
And:

.main-header__brand {
	...
	vertical-align: middle;  <--- this
}

---------------------------------------------------------------------------------------------------
Lecture 137 Opening and Closing the Hamburger Menu
---------------------------------------------------------------------------------------------------

Our index.hmtl:

    <header class="main-header">
        <div>
            <button class="toggle-button">
                <span class="toggle-button__bar"></span>
                <span class="toggle-button__bar"></span>
                <span class="toggle-button__bar"></span>
            </button>
            <a href="index.html" class="main-header__brand">
                <img src="images/uhost-icon.png" alt="uHost - Your favorite hosting company">
            </a>
        </div>
        
        
Our shared.css now looks like:

	//  Pop -up stuff
	var backdrop          = document.querySelector('.backdrop');
	var modal             = document.querySelector('.modal');
	var modalNoButton     = document.querySelector('.modal__action--negative');
	var selectPlanButtons = document.querySelectorAll('.plan button');

	// Side menu
	var toggleButton = document.querySelector('.toggle-button');
	var mobileNav    = document.querySelector('.mobile-nav');


	//console.dir(backdrop);
	//backdrop.style.display = 'block';

	console.dir(selectPlanButtons);

	// Add event listener to each plan button 
	// When button is clicked, show pop-up and backdrop (dimming the background)

	for (var i = 0; i < selectPlanButtons.length; i++) {
			selectPlanButtons[i].addEventListener('click', function() {
					modal.style.display    = 'block';
					backdrop.style.display = 'block';
			});
	}

	// When side menu button clicked - display menu close pop-up
	backdrop.addEventListener("click", function() {
			mobileNav.style.display = 'none';
			closeModal();
	});

	// If "No" is clicked in dialogue - just close pop-up
	modalNoButton.addEventListener("click", closeModal);

	// When closing pop-up also make backdrop disappear
	function closeModal() {
			backdrop.style.display = "none";
			modal.style.display    = "none";
	}

	// Add event listener to side menu button
	// When button is clicked, show side menu

	toggleButton.addEventListener('click', function() {
			mobileNav.style.display = 'block';
			backdrop.style.display  = 'block';
	});

---------------------------------------------------------------------------------------------------
Lecture 138 Manipulating Element Classes
---------------------------------------------------------------------------------------------------

Instead of changing the style of an element that has a certain class:

for (var i = 0; i < selectPlanButtons.length; i++) {
    selectPlanButtons[i].addEventListener('click', function() {
        modal.style.display    = 'block';   <--- here
        backdrop.style.display = 'block';   <--- here
    });
}

we can add a class called "open" that makes elements not be displayed...1

	.open {
			display: block;
	}

...and then change the class/classes attached to the element:

	Here we add the class "open" to the modal and backdrop element:
  //modal.style.display    = 'block';   <--- here
  //backdrop.style.display = 'block';   <--- here
	modal.classList.add('open');
	backdrop.classList.add('open');
	
Right away this deos not work because the display property is overwritten in the main.ccs 
which is included after the shared.css. The last one wins:

   <link rel="stylesheet"    href="shared.css">    
   <link rel="stylesheet"    href="main.css">

We can solve that with an old friend:

	.open {
			display: block !important;   = Don't let this be overridden!
	}
	
But we also need to do:

	function closeModal() {
			//backdrop.style.display = "none";
			//modal.style.display    = "none";
			modal.classList.remove('open');
			backdrop.classList.remove('open');
	}

	backdrop.addEventListener("click", function() {
			//mobileNav.style.display = 'none';
			mobileNav.classList.remove('open');
			closeModal();
	});

	toggleButton.addEventListener('click', function() {
			//mobileNav.style.display = 'block';
			//backdrop.style.display  = 'block';
			mobileNav.classList.add('open');
			backdrop.classList.add('open');
	});

---------------------------------------------------------------------------------------------------
Lecture 139 Understanding Property Notations
---------------------------------------------------------------------------------------------------

CSS have different notations for html element properties:

	CSS notation: background-image
	JS  notation: backgroundImage

Let's see how this is used in JS code like the one below:

	JS notation:
	console.dir(backdrop.style.backgroundImage);
	
	CSS notation (Came Case notation):
	console.dir(backdrop.style['background-image');
	
---------------------------------------------------------------------------------------------------
Lecture 140 Cleaning Up our Code
---------------------------------------------------------------------------------------------------	
	
Copyt from (main) index.html to packages/index.html:

	After </header> - before <main>:
	
    <nav class="mobile-nav">
        <ul class="mobile-nav__items">
            <li class="mobile-nav__item">
                <a href="packages/index.html">Packages</a>
            </li>
            <li class="mobile-nav__item">
                <a href="customers/index.html">Customers</a>
            </li>
            <li class="mobile-nav__item mobile-nav__item--cta">
                <a href="start-hosting/index.html">Start Hosting</a>
            </li>
        </ul>
    </nav>

    <nav class="mobile-nav">
        <ul class="mobile-nav__items">
            <li class="mobile-nav__item">
                <a href="index.html">Packages</a>   <--- change
            </li>
            <li class="mobile-nav__item">
                <a href="../customers/index.html">Customers</a>  <--- change
            </li>
            <li class="mobile-nav__item mobile-nav__item--cta">
                <a href="../start-hosting/index.html">Start Hosting</a> <--- change
            </li>
        </ul>
    </nav>

copy again ... to customers/index.html - with adapted link paths:

    <nav class="mobile-nav">
        <ul class="mobile-nav__items">
            <li class="mobile-nav__item">
                <a href="../packages/index.html">Packages</a>   <--- change
            </li>
            <li class="mobile-nav__item">
                <a href="index.html">Customers</a>  <--- change
            </li>
            <li class="mobile-nav__item mobile-nav__item--cta">
                <a href="../start-hosting/index.html">Start Hosting</a> <--- change
            </li>
        </ul>
    </nav>
    
    
Copy our side menu toggle button:

            <button class="toggle-button">
                <span class="toggle-button__bar"></span>
                <span class="toggle-button__bar"></span>
                <span class="toggle-button__bar"></span>
            </button>
            
To...  Packages/index.html + Customers/index.hmtl - After:

	    <header class="main-header">
        <div>

BUt clicking on the side menu button doesnt work! Why?
The Packages/index.html + Customers/index.hmtl are missing the shared.js file!

		</footer>
    <script src="shared.js"></script>   <-- must be imported in all html files!
	</body>

Let's fix that - put the import code with adapted import path in the two files:

	<script src="../shared.js"></script>
	
We also have to fix the html code for the favicon:

	<link rel="shortcut icon" href="favicon.png">
	<link rel="shortcut icon" href="../favicon.png">


After that we strill get an error:

	Uncaught typeError: Cannot read propery "addEventListener" of null at shared.js:27
	
We refer to elements in the shared.js file that only exist in the main index.html:

	This code only runs if we have plan selectPLanbuttons:

	for (var i = 0; i < selectPlanButtons.length; i++) {
			selectPlanButtons[i].addEventListener('click', function() {
					modal.classList.add('open');
					backdrop.classList.add('open');
					...
	
	However, this code tries to run no matter what:
	// If "No" is clicked in dialogue - just close pop-up
	modalNoButton.addEventListener("click", closeModal);

	We need to wrap that inside an if statement:
	
	if (modalNoButton) {
		modalNoButton.addEventListener("click", closeModal);
	}

	THis code also needs to be changed from:
	
	function closeModal() {
    modal.classList.remove('open');
    backdrop.classList.remove('open');
	}

	To:
	
	function closeModal() {
		if (modal) {
			modal.classList.remove('open');
		}
    backdrop.classList.remove('open');
	}
        
---------------------------------------------------------------------------------------------------
Lecture 141 Wrap Up
---------------------------------------------------------------------------------------------------	           

We learnt to:

Accessing Style Properties:

- Access CSS styles on DOM element via the style property.
- Access via Camelcase notation (backgroundImage), or using strings ('background-image')

Add & Remove CSS classes:

- Use className or ClassList
- classList is easier and more flexible

- JavaScript Basics: https://academind.com/learn/javascript
- JavaScript CSS Styles: https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style
- classList : https://developer.mozilla.org/en-US/docs/Web/API/Element/classList

---------------------------------------------------------------------------------------------------
SECTION 010 Making our Website More Responsive
---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
Lecture 143 Module Introduction
---------------------------------------------------------------------------------------------------	           

Responsive design is making webpages that looks good on different kinds of devices:

	- Desktops
	- Mobile devices

We've learn about:

- Hardware vs software pixels
- The viewport <meta> tag in HTML
- Media queries with @media

---------------------------------------------------------------------------------------------------
Lecture 144. Why our Project Should Become Responsive
---------------------------------------------------------------------------------------------------	

To look good on all devices...

---------------------------------------------------------------------------------------------------
Lecture 145. Understanding Hardware Pixels vs. Software Pixels
---------------------------------------------------------------------------------------------------	

In Chrome's inspector you can click on the "device" button and se what our codes would look like
on various devices.

Our webpage looks very small because the pixel density on a mobile device usually are much higher
than on a desktop monitor.

Some figures and tables to show this is available at:
	https://mydevice.io
	
To make our webpage responsive to this fact we have to use the viewport metatag.	
	<meta name="viewport" content="width=device-width, initial-scale=1.0">

Hardware vs software pixels:

---------------------------------------------------------------------------------------------------
Lecture 146. Comparing the Viewport Metatag (HTML) and Media Queries (CSS)
---------------------------------------------------------------------------------------------------	

What tools do we have:

Viewport                                     Media queries
-----------------------------------------    ----------------------------------------------
* Adjust site to device device viewport      * Change design depending on size
* No design changes                          * Design changes defined by us

---------------------------------------------------------------------------------------------------
Lecture 147 Understanding the "viewport" Metatag
---------------------------------------------------------------------------------------------------	

Examples of how we can control zxooming:

<meta name="viewport" content="width=device-width, initial-scale=1.5, 
	user-scalable=yes, maximum-scale=2.0, minimum-scale=1.2">

---------------------------------------------------------------------------------------------------
Lecture 148 Designing Websites "Mobile First"
---------------------------------------------------------------------------------------------------

Not me! I have a real computer!

---------------------------------------------------------------------------------------------------
Lecture 149 Adding our First Media Queries
---------------------------------------------------------------------------------------------------

First make sure we have this code in all our htm files:

	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	
We will try to make a website that looks good on a cellphone, tablet or a desktop device.

- Any viewport <= 640 pixels we will consider a mobile device.

In main html file - add this code for text "get the freedom...:

#product-overview h1 {
	...
  font-size: 1.6rem;

NOTE:

The text get bigger, depending on the font size of the base element, by default specified by the
browser default font setting.

BUT - the text does not change size depending on the viewport size (by changing size of browser window).
That's where media queries come into play!

In the main.css now add:

	/* If our viewport is at least 40rem - then apply this css code */
	@media (min-width: 40rem) {
		#product-overview h1 {
			font-size: 3rem;
		}
	}

When we make the viewport (browser window) 640px or wider we get a larger font for "Get the freedom..."!
Great!

We can add several css changes when the mediaquery matches:

	/* For tablets perhaps */
	@media (min-width: 40rem) {

		#product-overview {     <--- Make image proportionally larger for desktop sizes
			height: 40vh;
		}

		#product-overview h1 {
			font-size: 3rem;
		}
	}

And change the positioning (and clipping) of the image:

  #product-overview {
    height: 40vh;
    background-position: 50% 25%;   <--- here
  }

---------------------------------------------------------------------------------------------------
Lecture 150 Things to Keep in Mind when Working with Media Queries
---------------------------------------------------------------------------------------------------

A media query is basically an if statement + css to apply if it is true:

	@media (CONDITION) {
		CSS CODE TO APPLY
	}

The modern way to design webpages is to put "Mobile First" (which sucks!):

- This means the major part of the CSS we have written will be adapted so that it is the "default" code.
- The media queries will adapt the css when we have desktop size viewports.


Of course one could do it the other way around: "Desktop-First".

	In that case we would change

	...this code:
	@media (min-width: 40rem) {
	
	...into this code	
	@media (max-width: 40rem) {		
	
And then define what will apply for smaller virewports foun don mobile devices


We can add multiple media queries of course - like code for desktops:

	/* If our viewport is at least 50rem - Apply this css code */
	@media (min-width: 40rem) {

		#product-overview {
			height: 50vh;
			background-position: 50% 25%;
		}

		#product-overview h1 {
			font-size: 5rem;
		}
	}

Now we have 3 different kinds of css code...

- The default css code (viewport <  40rem) - mobile phones
- The first mediaquery (viewport >= 40rem) - tablets
- The first mediaquery (viewport >= 50rem) - desktops

Note that the order of the mediaqueries is important!
- The last one is applied!

---------------------------------------------------------------------------------------------------
Lecture 151 Finding the Right Breaking Points
---------------------------------------------------------------------------------------------------

You can get some guidance at https://mydevice.io

	- Look the column for CSS width for mobile phones for the first breaking point
	- Look the column for CSS width for tablets for the first breaking point

Best placement:
- the best way to place the media queries	is at the End of the CSS file.
- for the purpose of this course, though, we will keep them close to the related css code.

---------------------------------------------------------------------------------------------------
Lecture 152. Creating the Mobile First Design for our Plans
---------------------------------------------------------------------------------------------------

We wil change this backlground image positioning  from:

	#product-overview {
		background: linear-gradient(to top, rgba(80, 68, 18, 0.6) 10%, transparent),
			url("images/freedom.jpg") left 10% bottom 70%/cover no-repeat border-box,
			#ff1b68;

To:

	#product-overview {
		background: linear-gradient(to top, rgba(80, 68, 18, 0.6) 10%, transparent),
			url("images/freedom.jpg") center/cover no-repeat border-box,
			#ff1b68;
    
To make the girls head not be cut off at the top.	

We want to make the plans stack on top of each other for smaller devices, not be placed
side-by-side. And remove:

	.plan {
		background: #d5ffdc;
		text-align: center;
		padding: 1rem;
		margin: 0.5rem;
		display: inline-block;    <--- inline-block to block! (or remove it)
		width: 100%;              <--- 30%          to 100%  
		vertical-align: middle;
	}

They now stack up on top of each other and occupy most of thw width for our normal- mobile first code. 

The make the plans occupy the full width we need to:

	.plan__list {
		width: 80%;      -->  100%
		margin: auto;    --> remove
		text-align: center;
	}

Actually we will remove this for now:

	/* .plan__list {
		width: 100%;
		text-align: center;
	}  */

Also we will comment out this box-shadow (Ctrl-Shift-A):

	.plan--highlighted {
		background: #19b84c;
		color: white;
		/* box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.5); */
	}

---------------------------------------------------------------------------------------------------
Lecture 153 Making the Plans Responsive
---------------------------------------------------------------------------------------------------

Up til now nothing changes because the width of the plans are by default 100%;

We fix that now...

	@media (min-width: 40rem) {
		.plan {
			display: inline-block; 
			width: 30%;
		}
	}

And the plan align horizontally again side-by-side. We also add "vertical-align: middle;"

We also need to align the plans horizontally, reusing our earlier code:

	/* .plan__list {
		width: 100%;
		text-align: center;
	}
	*/

So it gets like :
	
	@media (min-width: 40rem) {

	.plan__list {
		width: 100%;
		text-align: center;
		}
	
		.plan {
			display: inline-block; 
			width: 30%;
			vertical-align: middle;
		}
	}

We'll also add back the box shadow for the highlighted...
And the min, and max width of the plans:

	@media (min-width: 40rem) {

	.plans__list {
			width: 100%;
			text-align: center;
	}
	
		.plan {
			display: inline-block; 
			width: 30%;
			vertical-align: middle;
			min-width: 13rem;            <-- here
			max-width:                   <-- here
		}

		.plan--highlighted {
			box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.5);     <-- here
		}
	}

---------------------------------------------------------------------------------------------------
Lecture 154. Your Challenge - Make Keyfeatures Resposive
---------------------------------------------------------------------------------------------------

We start by making the key features block elements:

	.key-feature {
		/*display: inline-block; */
		width: 30%;
		vertical-align: top;
	}

That works well for the mobile version.

Then we restore the desktop look for bigger viewports:

	@media (min-wifth: 40rem) {
		.key-feature {
			display: inline-block;
			width: 30%; 
			vertical-align: top;
			list-style: none;
		}
	}

---------------------------------------------------------------------------------------------------
Lecture 155 Working with Logical Operators
---------------------------------------------------------------------------------------------------

We can combine multiple conditions in our media queries with operator "and", like...

	@media (min-width: 40rem)  and (min-height: 60rem) {

		#product-overview {
			height: 40vh;
			background-position: 50% 25%;
		}

		#product-overview h1 {
			font-size: 3rem;
		}
	}

...only do somethng if the viewport height is of a certain size.

Or if the orientation is portrait or landscape:

	@media (min-width: 40rem) and (orientation: portrait) {

		#product-overview {
			height: 40vh;
			background-position: 50% 25%;
		}

		#product-overview h1 {
			font-size: 3rem;
		}
	}

	@media (min-width: 40rem) and (orientation: landscape) {

	.plans__list {
			width: 100%;
			text-align: center;
	}
	
		.plan {
			display: inline-block; 
			width: 30%;
			vertical-align: middle;
			min-width: 13rem;
			max-width: 25rem;
		}

		.plan--highlighted {
			box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.5); 
		}
	}

We can combine multiple conditions in our media queries with a logical or-operator ",":

	@media (min-width: 40rem), (orientation: landscape) {... }

But we will only use this combination:

	@media (min-width: 40rem) and (min-height: 60rem) {

		#product-overview {
			height: 40vh;
			background-position: 50% 25%;
		}

		#product-overview h1 {
			font-size: 3rem;
		}
	}
	
---------------------------------------------------------------------------------------------------
Lecture 156 Improving the customers page
---------------------------------------------------------------------------------------------------

- The main page now looks ok.
- The packages page also looks good by default
- On the customers page the texts are squeezed really badly when shown on small viewports.

In customer.html a testimonial looks like:

   <div class="testimonial" id="customer-1">
       <div class="testimonial__image-container">
           <img src="../images/customer-1.jpg" alt="Mike Statham - Customer" class="testimonial__image">
       </div>
       <div class="testimonial__info">
           <h1 class="testimonial__name">Mike Statham</h1>
           <h2 class="testimonial__subtitle">Founder of
               <a href="tech-analysis.com">tech-analysis.com</a>
           </h2>
           <p class="testimonial__text">uHost helped me realize my project with a highly constrained budget in like no time.</p>
       </div>
   </div>
            
Let's do:

  .testimonial__image-container {
    width: 65%;
    max-width: 580px;
    min-width: 200px;
  /* display: inline-block; */            <-- this
  /* vertical-align: middle; */           <-- this
    box-shadow: 3px 3px 5px 3px rgba(0,0,0,0.3);
  }

  .testimonial__image {
    width: 100%;
    vertical-align: bottom;
  }

  .testimonial__info {
    text-align: right;
    padding: 0.9rem;
  /*   display: inline-block; */       <-- this
  /*  vertical-align: middle; */ 
  /*  width: 30%;             */ 
  }
  
  .testimonial {  
    font-size: 1.2rem;
    margin: 48px 0;
    margin: 3rem 0;
  }
  
  /* .testimonial__list {
      width: 80%;
      margin: auto;
	} */
	
We need to get back the desktop look...

@media (min-width: 40rem) {

    .testimonial {
       margin: 3rem 0; 
    }

    .testimonial__image-container {
       display: inline-block; 
      vertical-align: middle;
      width: 66%;               <--- add
    }
    
  .testimonial__info {
    display: inline-block;
    vertical-align: middle;
    width: 30%;
  }    
}

Let's change the default - mobile style:

 .testimonial__image {
    width: 100%;
/*  width: 65%; */
    vertical-align: bottom;
  }
  
And this too...

  .testimonial__image-container {
    width: 100%;
    max-width: 580px;
    /* max-width: 580px; */
    max-width: 40rem;
    box-shadow: 3px 3px 5px 3px rgba(0,0,0,0.3);
  }    
    
---------------------------------------------------------------------------------------------------
Lecture 157 Improving the Packages Page
---------------------------------------------------------------------------------------------------

In the packages.css - at the bottom:


@media (min-width: 40rem) {

    .main {
      margin: 3rem auto; 
      max-width: 1500px;
    }
}

So the main element are centered when vp wider than 40rem.
Bu the packages lack some left and right borders...

---------------------------------------------------------------------------------------------------
Lecture 158 Cleaning Up the Navigation Bar
---------------------------------------------------------------------------------------------------

Unrelated change:

IN main.css - Change:
	@media (min-width: 40rem) and (min-height: 60rem) {

To:
	@media (min-width: 40rem) and (min-height: 40rem) {

	
	
.main-header__brand {
    color: #0e4f1f;
    text-decoration: none;
    font-weight: bold;
  /*   font-size: 1.5rem; */  <-- fix
    height: 2.5rem;
    display: inline-block;
    vertical-align: middle;
}

.main-header__brand img {
    height: 100%;              <-- fix
}

---------------------------------------------------------------------------------------------------
Lecture 159 Positioning our Footer Correctly
---------------------------------------------------------------------------------------------------

Our footer element is hanging loose, at least in the cutomer and packages pages.

- We want both our header and footer to be fixed
- We want the main area to take up the rest of vertical space.

We need to calculate the relative vertical sizes of these element

We already have such a calculation for the main navigation area:

	.main-nav {
			display: inline-block;
			text-align: right;
			width: calc(100% - 122px);   <--- here
			vertical-align: middle;
	}

Let's begin with the main area calculation instead: 

main {
    /* Main area height 100% of viewport height - header height - footer height */
    min-height: calc(100vh - 3.5rem - 8rem);
    margin-top: 3.5rem;
}

Dive Deeper into Selected Topics

- Absolute lengths on W3.org: https://www.w3.org/TR/css-values-3/#absolute-lengths
- More about device sizes: https://bjango.com/articles/min-device-pixel-ratio/
- Media queries theory: https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries
- Applying media queries: https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries
 
 GOD - I'M BORED TO DEATH OF THIS COURSE!!!!!
 
---------------------------------------------------------------------------------------------------
SECTION 011 Adding and Styling forms
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
Lecture 163 Adding the Unstyled Form
---------------------------------------------------------------------------------------------------

New directory: start-hosting
New file     :   index.html

---------------------------------------------------------------------------------------------------
Lecture 164. Page Initialization
---------------------------------------------------------------------------------------------------

Lets add a stasrt-hosting.css file and add:

	main {
			padding-top: 2rem;
	}

	.signup-title {
			text-align: center;
			font-size: 1.8rem;
			color: #ff5454;
	}

The html we will style looks like:

   <form action="index.html" class="signup-form">   <-- the form itself       
       <label for="title">Title</label>
       <select id="title">                          <-- select box
           <option value="mr">Mr.</option>
           <option value="ms">Ms.</option>
       </select>
       
       <label for="first-name">First name</label>   <-- label/input pairs ....
       <input type="text" id="first-name">
       
       <label for="last-name">Last name</label>
       <input type="text" id="last-name">
       <label for="email">E-Mail</label>
       <input type="email" id="email">
       <label for="password">Password</label>
       <input type="password" id="password">
       <input type="checkbox" id="agree-terms">     <--- for checkboxes labels should come after         
       <label for="agree-terms">Agree to
           <a href="#">Terms &amp; Conditions</a>
       </label>
       <button type="submit" class="button">Sign Up</button>
   </form>
 
Then we add some basic styilin for the form elements:

   /* Top put labels, input, select element on top of each other we make them block elements */
   .signup-form label,
   .signup-form input,
   .signup-form select 
   {
       display: block;
       margin-top: 1rem;
       width: 100%;
   }
   
---------------------------------------------------------------------------------------------------   
Lecture 165 Understanding Advanced Attribute Selectors
---------------------------------------------------------------------------------------------------

See image in the section 11 dir...

--------------------------------------------------------------------------------------------------- 
Lecture 166 Working on the General Layout
---------------------------------------------------------------------------------------------------
 
To select and style the checkbnox we could use:
 
	.signup-form input[type="checkbox"]
	
But we will use ( for some reason):

	 .signup-form input[id="*terms"] {
       display: inline-block;
   }

And too include the same style for the label after it:

    .signup-form input[id*="terms"],
    .signup-form input[id*="terms"] + label {
        display: inline-block;
        width: auto;
    }
    
Let style the submit button:

	.signup-form button[type="submit"] {
			display: block;
			margin-top: 1rem;
	}
	
And get some padding inside the form:

	.signup-form {
			padding: 1rem;
	}

And all label a bold font:

	.signup-form label {
			font-weight: bold;
	}

	The input fields stetch to 1005 width - for mobile-first design, but they are too big for desktop sozes:
	
	@media (min-width: 40rem) {
    .signup-form {
        margin: auto;
        width: 25rem;
    }
	}
	
--------------------------------------------------------------------------------------------------- 
Lecture 167. Restyling the Form Elements
---------------------------------------------------------------------------------------------------

We add some styling for ourt input and select elements:

	.signup-form input,
	.signup-form select {
			border: 1px solid #ccc;
			padding: 0.2rem 0.5rem;
			font: inherit;
	}

	.signup-form input:focus,
	.signup-form select:focus {
			outline: none;
			background: #d8f3df;
			border-color: #2ddf5c;
	}

--------------------------------------------------------------------------------------------------- 
Lecture 168 Styling the Checkbox
---------------------------------------------------------------------------------------------------
	
In the last lesson we styled even the checkbox - we will revert that now:

	.signup-form input:not([type="checkbox"]),   <--- here
	.signup-form select {
			border: 1px solid #ccc;
			padding: 0.2rem 0.5rem;
			font: inherit;
	}

And for the checkbox add:

	/* .signup-form input[type="checkbox"] */  Alternate way of adressing only the checkbox
	
	.signup-form input[id*="terms"],              <-- Gneral styling for checkbox and label
	.signup-form input[id*="terms"] + label {
			display: inline-block;                    <-- display checkbox and label next to each other
			width: auto;
			vertical-align: middle;                   <-- align middle with text
	}

	.signup-form input[type="checkbox"] {         <-- specific style for checkbox itself
			border: 1px solid #ccc;
			background: white;
			width: 1rem;
			height: 1rem;
			-webkit-appearance: none;                 <-- Remove chrome default styling for checkbox
			-moz-appearance: none;                    <-- For mozilla-family browsers
			appearance: none;                         <-- For all else
	}	
	
At this point, though, we have lost the visible clue that it is checked - there's no cross!!
Let's fix that with pseudoclass "checked":

	.signup-form input[type="checkbox"]:checked {
			background: #2ddf5c;
			border: #0e4f1f;
	}

--------------------------------------------------------------------------------------------------- 
Lecture 169. Providing Validation Feedback
---------------------------------------------------------------------------------------------------

- We are mainly concerned with some simple user-side validation right now - using javascript.

- We will add the css class "invalid" when the user does not enter the right kind of data:
	<select id="title" class="invalid">
	<input type="email" id="email" class="invalid">
	<input type="checkbox" id="agree-terms" class="invalid">
	
- And style the element that gets that class applied to it.

	.signup-form input.invalid,
	.signup-form select.invalid {
			border: 1px solid red;
			background:rgb(250,172,172);
	}

We can also let the browser require that fields have the data that suits its type, adding
required to enforce the user to fill it in:

   <label for="first-name">First name</label>
   <input type="text" id="first-name" required>
   <label for="last-name">Last name</label>
   <input type="text" id="last-name" required>
   <label for="email">E-Mail</label>
   <input type="email" id="email" required>
   <label for="password">Password</label>
   <input type="password" id="password" required>
   <input type="checkbox" id="agree-terms" required>

Make sure the browser you intend the code to work on are supported;

	https://developer.mozilla.org/en-US/docs/Web/CSS/:invalid
	
--------------------------------------------------------------------------------------------------- 
Lecture 170 Styling the Signup Button
---------------------------------------------------------------------------------------------------	
            
We did some styling before:

	.button {
			background: #0e4f1f;
			color: white;
			font: inherit;                 <-- nb: we had to override browser defaults
			border: 1.5px solid #0e4f1f;
			padding: 0.5rem;
			border-radius: 8px;
			font-weight: bold;
			cursor: pointer;
	}
	
A button has a pseudo class "disabled"	which can be applied unitl the user has filled in the required
and right kind of data in the form.

We will just tmeporarily hardcode it in our html to see the difference and be able to style it.

	<button type="submit" class="button" disabled>Sign Up</button>

Styling:

	.button[disabled]{
			cursor: not-allowed;
			border: #a1a1a1;
			background: #ccc;
			color: #a1a1a1;
	}

--------------------------------------------------------------------------------------------------- 
Lecture 171 Fixing a Broken Link
---------------------------------------------------------------------------------------------------

Already fixed!

--------------------------------------------------------------------------------------------------- 
Lecture 172 Wrap Up
---------------------------------------------------------------------------------------------------

Styling inputs:

- Input elements tend to have many browser default styles
- Override using:

	-webkit-appearance: none;                 <-- Remove chrome default styling for checkbox
	-moz-appearance: none;                    <-- For mozilla-family browsers
	appearance: none;                         <-- For all else
			
- Use pseudo-selectors (:focus) to provide good user feedback
- outlines go outside of borders

Validation feedback:

- :valid and :invalid pseudo selectors
- Manual validation feedback using a class addition (with js) (e.g. "invalid")

MOre on the same:

- Styling Form Elements: https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Styling_HTML_forms
- Styling a <select>  Element: https://stackoverflow.com/questions/1895476/how-to-style-a-select-dropdown-with-css-only-without-javascript
    
---------------------------------------------------------------------------------------------------
SECTION 012 Working with text and fonts
---------------------------------------------------------------------------------------------------    

--------------------------------------------------------------------------------------------------- 
Lecture 174 Module Introduction
---------------------------------------------------------------------------------------------------

- Generic & Font families
- Importing & Using font families
- Font properties
- Font shorthand

--------------------------------------------------------------------------------------------------- 
Lecture 175 Comparing Generic Families & Font Families
---------------------------------------------------------------------------------------------------

Generic:                 Font Families - More Specific:

	- serif          ->    Times New Roman, Georgia
	- sans-serif     ->    Helvetica, Verdana
	- cursive        ->    Brush Script. Mistral
	- monospace      ->    Courier New, Lucida Bright
	- fantasy

--------------------------------------------------------------------------------------------------- 
Lecture 176 Understanding the Browser Settings
---------------------------------------------------------------------------------------------------

What font will be displayed?

- Default decided by the browser settings.

- We can define a generic family in CSS and let the Browser setting decides actual font family.

- We can define a font-family like Verdana:

	- From user's computer - not so good for remote users
	- From Web fonts       - a lot better 
	- From server          - maybe from the web server itself
	
--------------------------------------------------------------------------------------------------- 
Lecture 177 Using the Default Font Families
---------------------------------------------------------------------------------------------------

Let's look at the text describing the packages on the packages page.

	.package__info {
			padding: 1rem;
			border: 1px solid #0e4f1f;
			font-size: 1.2rem;
			color: #0e4f1f;
			background: white;
	}

We inherit some properties from the body element (of shared.css):

	body {
			font-family: 'Montserrat', sans-serif;
    
One of the two fonts we imported in the man index.hmtl file:

	<link href="https://fonts.googleapis.com/css?family=Anton" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css?family=Montserrat:400,700" rel="stylesheet">
    
   
--------------------------------------------------------------------------------------------------- 
Lecture 178 Understanding the "font-family" Syntax
---------------------------------------------------------------------------------------------------

Let's look at the font-family property:

  font-family: 'Montserrat', sans-serif;
  
  - The quotation marks are not necessary in this case - there are no space in the font name.
  - 'Montserrat' is the first choice and sans-serif the second
  - So, start with a preferred font-family, and add a generic font in the end as a fallback.
  - Of course, you can list several choices, not just two.
  
--------------------------------------------------------------------------------------------------- 
Lecture 179 Working with Locally Saved Fonts
---------------------------------------------------------------------------------------------------

Some places you can find web fonts:
- https://www.cssfontstack.com 
- Here we find fonts there aare usually available on win/mac.

- https://fonts.google.com/  
- Here we find better-looking, but more unusual fonts, which we can import somehow to our project:
	<link href="https://fonts.googleapis.com/css?family=Montserrat:400,700" rel="stylesheet">
  
See also:
- https://www.w3schools.com/cssref/css_websafe_fonts.asp

--------------------------------------------------------------------------------------------------- 
Lecture 180 Working with Google Fonts
---------------------------------------------------------------------------------------------------

If we don't want to limit ourselves to fonts available on the users computer,
a better option is the import web fonts that the web browser will get access to
when surfing to our web page.

WHERE TO FIND WEB FONTS:
------------------------------------------------------

- https://fonts.google.com/  
- Here we find better-looking, but more unusual fonts, which we can import somehow to our project:
	<link href="https://fonts.googleapis.com/css?family=Montserrat:400,700" rel="stylesheet">
	
- We can search for a subset of the generic types of fonts we are interested in.
- We can try typing in text
- See what the font look like in different sizes
- See the whole alphabet
- And so on...

WE CAN ALSO CHOOSE DIFFERENT "FONT FACES".
------------------------------------------------------

	We actually have three different levels of specificity:
	- Generic font family - like sans-serif
	- The font-family     - like Roboto
	- Font faces          - Like Light 300, Light 300 Italic, Regular 400, etc

In a face name like "Light 300 italic", 

	- "Light 300" is the weight
	- "italic"    is the style

HOW TO IMPORT THE FONT - STANDARD (NOT SO GOOD) WAY:
------------------------------------------------------

- Choose one of the font-family/font-face combos you like and press the box surroundin git.
- Choose font face in the list by click "Select this style"
- You will learn how to:

	- Embed the font (standard way)- in our packages/index.hmtl: 
	<link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet"> 
	
	- Specify it in CSS (in packages/packages.css): 
	font-family: 'Roboto', sans-serif;
	
Theres one problem though!
	- We have to add it to every web page where we want to use this font.

BUT THERE'S ANOTHER BETTER EMBEDDING METHOD: @IMPORT
------------------------------------------------------

	- This way we can import it directly to our css file instead
	- So we can get this style for all pages using our style sheet.
	
So at https://fonts.google.com/ after choosing your font, and:

	- Click "Embed Font / @import":
	<style>@import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');</style>

  - Put this in our shared.css file - at the top e.g.:
  @import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');
  
  - And this nice font should be available to all our web pages!
  
	- We can now remove this from packages/index.html:
		<link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet"> 

Let's do the same for:

    <link href="https://fonts.googleapis.com/css?family=Anton" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Montserrat:400,700" rel="stylesheet">

Resulting in these 3 lines in shared.css:

	@import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');
	@import url('https://fonts.googleapis.com/css2?family=Anton&display=swap');
	@import url('https://fonts.googleapis.com/css2?family=Montserrat:400,700&display=swap');

Remove from main, customers, packages, start-hosting index.hmtl files:

    <link href="https://fonts.googleapis.com/css?family=Anton" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Montserrat:400,700" rel="stylesheet">
    
--------------------------------------------------------------------------------------------------- 
Lecture 181. Understanding Font Faces & "font-style"
---------------------------------------------------------------------------------------------------

What are these numbers in the name of hte font faces?
- There are 100, 200, 300, 400 and so forth.

Well they are different weights:

	- 400 = Normal
	- 700 = Bold
	
But if we try out this family and weight:

	font-family: 'Roboto', sans-serif;
	font-weight: 900;
	
Ity doesnt work, why?

Well, we only imported the normal font face, Roboto - Regular 400.
	@import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');

Soo, the browser can't show us this weight of 900.
We have to import every font face  that we want to use:

	@import url('https://fonts.googleapis.com/css2?family=Roboto:100i,400,900&display=swap');

	NB: You will get this info from google font page. Just add the faces you need.
	
Now we can do:

	font-family: 'Roboto', sans-serif;
	font-weight: 100;     # From: The Roboto:100i font face
	font-style: italic;   # From: The Roboto:100i font face
	
If we fail to import the cursive style: 100i the browser will still be able to
render the text in italic style, but usually not as smoothly and good-looking.

So we can use:
	@import url('https://fonts.googleapis.com/css2?family=Roboto:100,400,900&display=swap');
	
Bu this is the syle we will use:

.package__info {
		---
    font-size: 1.2rem;
    font-family: 'Roboto', sans-serif;
    font-weight: 900;
    font-style: italic;
    ---
}
	
--------------------------------------------------------------------------------------------------- 
Lecture 181 Understanding Font Faces & "font-style"
---------------------------------------------------------------------------------------------------	

If we wanted to create our own font, we can simulate that like this:

- https://fonts.google.com/  
- Choose Anonymous Pro - Regular 400 font
- Instead ofusing the standard, or @import way we'll...
- Click "Download the family" instead
- We get a zip file with 4 ttf files:

	AnonymousPro-BoldItalic.ttf
	AnonymousPro-Bold.ttf
	AnonymousPro-Italic.ttf
	AnonymousPro-Regular.ttf

	We'll use the AnonymousPro-Regular.ttf font, like so:
	
	packages/packages.css:
	
	@font-face {
			font-family: "AnonymousPro";
			src: url("AnonymousPro-Regular.ttf");  <-- I copied the ttf file to packages directory.
	}

	And then change the fonts for our packages info like so:
	
	.package__info {
    padding: 1rem;
    border: 1px solid #0e4f1f;
    font-size: 1.2rem;
    font-family: 'AnonymousPro', sans-serif;
		...
		
This works, but right now we only have access to the normal font, and not e.g. the bold face font.
So let's add that:

	@font-face {
			font-family: "AnonymousPro";
			src: url("AnonymousPro-Bold.ttf");
	}

Now bold styling works:
	font-weight: bold;
	
But not normal style:	
	font-weight: normal;
	
Only the last of these two definition take effect:

	@font-face {
			font-family: "AnonymousPro";
			src: url("AnonymousPro-Regular.ttf");
	}

	@font-face {
			font-family: "AnonymousPro";
			src: url("AnonymousPro-Bold.ttf");
	}

The bold font!

However if we add the font-weight property to the font-face with that style...

	@font-face {
			font-family: "AnonymousPro";
			src: url("AnonymousPro-Bold.ttf");
			font-weight: 700;   <--- here
	}
	
Then we can differentiate between the two and "font-weight: normal" works.
That is, the bold font does not override the normal face with the same name.

NB: SO ALWAYS ADD THIS PROPERTY SO THE BROWSER CAN TELL THEM APART!

--------------------------------------------------------------------------------------------------- 
Lecture 183 Understanding Font Formats
---------------------------------------------------------------------------------------------------	

Importing a fontface we add optional info about a fonts format, like truetype:

	@font-face {
			font-family: "AnonymousPro";
			src: url("AnonymousPro-Regular.ttf")  format("truetype");   <-- here
	}

	@font-face {
			font-family: "AnonymousPro";
			src: url("AnonymousPro-Bold.ttf")  format("truetype");      <-- here
			font-weight: 700;
	}

WHICH FILE FORMATS CAN I USE?

	- Go to: https://caniuse.com/	
	- Type in "ttf" in the search field at the Topics
	- See which browsers support thsi font format

Some font file formats:
  - ttf    - true type font
	- woff   - web open font format (a compressed format - smaller)
	- woff2  -                      (better compression)
  - And others...
  
To be as flexible as possible we can add sevceral formats to our css file:

	@font-face {
			font-family: "AnonymousPro";
			src: url("AnonymousPro-Regular.woff2")  format("woff2"),
			src: url("AnonymousPro-Regular.woff")  format("woff"),
			src: url("AnonymousPro-Regular.ttf")  format("truetype");
	}
	
--------------------------------------------------------------------------------------------------- 
Lecture 184 Diving into Font Properties
---------------------------------------------------------------------------------------------------		

Let's deal with the styling of the customers page and the description of the customers.

  .testimonial__text {
    margin: 0.2rem;
  }

Some of the properties we can pay with are...

	- font-size, font-weight, font-family, font-style
	
But also..

	- font-variant  {inherit, initial, normal, small-caps, unset }
	
	- font-stretch  { condensed, expanded, extra-condensed, extra-expanded, initial,  narrower, 
	                  normal, semi-condensed, semi-expanded, ultra-condensed, ultra-expanded }
	                  
	- But most of these has to be supported by the particular font you use.
	- More about it here: https://developer.mozilla.org/en-US/docs/Web/CSS/font-stretch
	
	                  
Like:

 .testimonial__text {
    margin: 0.2rem;
    font-variant: small-caps;
  }
	
--------------------------------------------------------------------------------------------------- 
Lecture 185 Adding "letter-spacing"
---------------------------------------------------------------------------------------------------  

Another text property we use is one that spaces out letters of our text:

	- letter-spacing    { LENGHT }
	- letter-spacing: 5px;

And...

	- whitespace: { normal, nowrap, pre }
	
	- "normal"     Sequences of white space are collapsed. Newlines treated like other white space.
	               Lines are broken as necessary to fill line boxes.
	               
	- "nowrap"     Like normal, but displays all the text on one line
	
	- "pre"        Sequences of white space are preserved. Lines broken at newline in source
	               and at <br> elements.
	               
	- "pre-wrap"   Sequences of white space are preserved. Lines are broken at newline in source,
	               at <br>, and as necessary to fill line boxes.
	               
	- "pre-line"   Sequences of white space are collapsed. Lines are broken at newline characters, 
	               at <br>, and as necessary to fill line boxes.
	
	More about this, and tests at:
	https://developer.mozilla.org/en-US/docs/Web/CSS/white-space
	
	For now, we'll use:
	
	  .testimonial__text {
    margin: 0.2rem;
    white-space: pre-line;  
  }

--------------------------------------------------------------------------------------------------- 
Lecture 186 Changing the Line Height
--------------------------------------------------------------------------------------------------- 

We now remove the white-space property:

  .testimonial__text {
    margin: 0.2rem;
  }
  
Let's add this styling:

.package__info {
	...
	line-height: 1;  */ Our font size is 1,2rem = 19.2px ~ line-height = 19 px (rounded off fontsize)
	line-height: 2;  */ Our font size is 1,2rem = 38.4px ~ line-height = 38 px (rounded off fontsize)
	
	However, if we specify...
	line-height: normal;
	
	...line-height also depends partly on the Font-family.
	"Montserrat"   = lineheight = 24
	"AnonymousPro" = lineheight = 19
	
	With line-height, using simple numbers, kike 1, 2, 3 is the best.
	Although it is possible to use px, or % also.
	
	But let's restore this to:
	
	.package__info {
    padding: 1rem;
    border: 1px solid #0e4f1f;
    font-size: 1.2rem;
    font-family: 'AnonymousPro', sans-serif;
    font-weight: bold;
    color: #0e4f1f;
    background: white;
	}



--------------------------------------------------------------------------------------------------- 
Lecture 187 Applying "text-decoration" & "text-shadow"
--------------------------------------------------------------------------------------------------- 

Let's try out text-decoration:

	text-decoration: POSITION STYLE;

	.package__info {
		text-decoration: underline;
		text-decoration: overline;
		text-decoration: line-through;
		
		The line can further be: dotted, dashed, double or wavy
		text-decoration: underline dotted;
	
		We will not use this styling in our project right now, though.
		
And of course to remove text-decoration, for like links we can use:	
	text-decoration: none;
	
Let's try out text-shadow:

	text-shadow: X-OFFSET Y-OFFSET BLUR COLOR;
	
	.package__info {
			text-shadow: 5px 5px;            /* Look horrible - Wrong glasses? */
			text-shadow: 5px 5px 2px gray;   /* Looks better  - A bit tired? */
			text-shadow: 2px 2px 5px gray;   /* Looks good    - Reading glasses on! */
			
	But, we wil not really use this in our project, either.
	
--------------------------------------------------------------------------------------------------- 
Lecture 188 Understanding the "font" Shorthand
--------------------------------------------------------------------------------------------------- 

This property is a shorthand for the following CSS properties:

font:

    font-style     /* Optional - Must precede font-size */
    font-variant   /* Optional - Must precede font-size */
    font-weight    /* Optional - Must precede font-size */
    font-size      /* Mandatory */
    line-height    /* Optional  - Must immediately follow font-size - preceded by "/"   */
    font-stretch   /* Optional  - Must be single keyword value */
    font-family    /* Mandatory - Must be the last value specified.*/

WITH THE SHORTHAND FONT...

- Some values are mandatory, like font-family, and font-size:
	font: 1.2rem "AnonymousPro", sans-serif;
	
- And like seen above, the order of the properties are important.

	E.g.: font-weight, while optional, must precede font-size:
	font: 700 1.2rem "AnonymousPro", sans-serif;
	
	E.g.: font-variant, while optional, must also precede font-size:
  font: small-caps 700 1.2rem "AnonymousPro", sans-serif;
   
The font shorthand can also be used to specify the default font for various elements on 
your computer like menus, icons ond so on:

SYSTEM FONT VALUES

	caption       : System font used for captioned controls (e.g., buttons, drop-downs)
	icon          : System font used to label icons.
	menu          : System font used in menus (e.g., dropdown menus and menu lists).
	message-box   : System font used in dialog boxes.
	small-caption : System font used for labeling small controls.
	status-bar    : System font used in window status bars.
    
So if we could try...

	/*  font: 700 1.2rem "AnonymousPro", sans-serif; */
   font: menu;    And get pretty small font used for menus...
   
We won't use that either, so revert to:
		font: 700 1.2rem "AnonymousPro", sans-serif;
    
Read more: 
- https://developer.mozilla.org/en-US/docs/Web/CSS/font


--------------------------------------------------------------------------------------------------- 
Lecture 189 Loading Performance & "font-display"
--------------------------------------------------------------------------------------------------- 

Let's look at the performance aspects of custom fonts. 
In particular let's see how we can affect it with the font-display property.

We have two different events during font loading:

	- block period: 
		The fonts are not loaded yet - but the space is reserved - and fallback font not yet shown

	- Fallback font shown
		
	- swap period:
	  The period where the browser loads the actual font specified in css

So we can define...

	font-display: swap;      - Extremely small block period and an infinite swap period.
	                           So, a fallback font is displayed almost immediately.
	                           The browser has an infinite time to try to load the custom font.
	                           
	font-display: block;     - Short block      period | infinite swap period.
	font-display: fallback;  - Very short block period | short swap period.
	font-display: optional;  - Very short block period | no swap period.
	
	font-display: auto;      - The font display strategy is defined by the user agent.
	

...when importing our fonts:

	@font-face {
			font-family: "AnonymousPro";
			src: url("AnonymousPro-Regular.ttf")  format("truetype");
			font-display: swap;
	}
	
Or like in our shared.css we can add this swap value like so:

	@import url('https://fonts.googleapis.com/css2?family=Roboto:100,400,900&display=swap');
	@import url('https://fonts.googleapis.com/css2?family=Anton&display=swap');
	@import url('https://fonts.googleapis.com/css2?family=Montserrat:400,700&display=swap');

The default is usually:
	font-display: block;
	
IE and Edge compatibility is not very good though.	
	
Read more:
- https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display

--------------------------------------------------------------------------------------------------- 
Lecture 190 Wrap Up
---------------------------------------------------------------------------------------------------

Read the fucking notes...

Dive Deeper into Selected Topics

- Web Safe Fonts: https://www.cssfontstack.com/
- Google Fonts: https://fonts.google.com/
- The "line-height" property: https://developer.mozilla.org/en-US/docs/Web/CSS/line-height

---------------------------------------------------------------------------------------------------
SECTION 013 Adding Flexbox to our Project
--------------------------------------------------------------------------------------------------- 

Flexbox - the modern way to change the way our elements are displayed.






