---------------------------------------------------------------------------------------------------
UDEMY CSS - THE COMPLETE GUIDE
---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
Setting up repo in Github
---------------------------------------------------------------------------------------------------

Created a new repo at htts://github.com

	- Chose not to create a Readme file
	- I will push my existing rpeo to this remote

Initialized my course directory and made my first commit:

	$ git init 
	$ git add .
	$ git commit -m "First commit"

Pushed my existing repository from the command line:

	$ git remote add origin git@github.com:goranbr/udemy-css-tcg.git
	$ git push -u origin master

---------------------------------------------------------------------------------------------------
SECTION 001 Getting Started
---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
Lecture 009 Recommended tools
---------------------------------------------------------------------------------------------------

- Visual Studio Code
	https://code.visualstudio.com/

- Chrome Browser
	# apt-get install chromium-browser

---------------------------------------------------------------------------------------------------
SECTION 002 Diving Into the Basics of CSS	
---------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------
Lecture 016 Applying Additional Styles & Importing Google Fonts
---------------------------------------------------------------------------------------------------

Importing Google fonts:
	- Google: "Google fonts"
	- Find a font that you like and read the instructions

In the html head section:
	<link href="https://fonts.googleapis.com/css?family=Anton" rel="stylesheet">
	
In the css rules:
	font-family: "Anton", sans-serif
	
	
---------------------------------------------------------------------------------------------------
Lecture 021 Theory Time - Combinators
---------------------------------------------------------------------------------------------------

Understanding Combinators

Adjacent sibling (+):
	- h2 + p { ... }
	- Element share the same parent
  - Second element follows immediately after first element
	
	Example:
	<h2>...</h2>
	<p>Applied here</p>
	
General sibling	(~):
	- h2 ~ p { ... }
	- Element share the same parent
	- Second element comes somewhere after first element

	Example:
	<h2>...</h2>
	<p>Applied here</p>
	<p>Applied here also</p>
	
Child (>):
	- div > p { ... }
	- Second element a direct child of the first
	
	Example:
		<div>Main text</div>
		<p>Applied here</p>
	
Descendant (space):
	- div  p { ... }
	- Second element is a descendant of the first
	
	Example:
		<div>Main text</div>
		<h1>My header</h1>
		<p>Applied here</p>
	
	
---------------------------------------------------------------------------------------------------
Lecture 022 Summarizing Properties & Selectors
---------------------------------------------------------------------------------------------------

Selectors, Properties and Values...

SELECTORS
---------------------------------------

- elements   : div
- classes    : .menu-titles
- id's       : #main-title
- attributes : [disabled]
- universal  : *

PROPERTIES
---------------------------------------

- background 
- width
- color
- margin
- display
- https://developer.mozilla.org/en-US/docs/Web/CSS/Reference

VALUES
---------------------------------------

Values are tightly coupled to each specific property:

Pre-defined options:
- display: block
- overflow: auto

Colors:
- red,#fa4545, #ccc

Length, sizes and numbers:
- 30%, px, 3

Functions:
- background: url(...);
- transform: scale(...);

---------------------------------------------------------------------------------------------------
SECTION 003 Diving Deeper into CSS
---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
Lecture 025 Module Introduction
---------------------------------------------------------------------------------------------------

In this module:

- The box module
- Height and width
- The display property
- "Properties worth to remember"
- Pseudo classes & elements

---------------------------------------------------------------------------------------------------
Lecture 028 Understanding Margin Collapsing and Removing Default Margins
---------------------------------------------------------------------------------------------------

Removing Default Margins:
	body { margin: 0px; }
	
Margin Collapsing:
- Two adjacent margins are collapsed by default
- The bigger margin defines the shared margin 
- https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing

---------------------------------------------------------------------------------------------------
Lecture 032 Diving Into the Height & Width Properties
---------------------------------------------------------------------------------------------------

- Block level elements always take up 100%  of the - available - width by default.

---------------------------------------------------------------------------------------------------
Lecture 033 Understanding Box Sizing
---------------------------------------------------------------------------------------------------

When we change an elements width and height - what are we really changing the size of, in terms
of its parts - content, padding, border, margin? 

This behaviour can be modified by using the property: box-sizing

By default: 

	- box-sizing: content-box 
	- Only the content is addressed by the value you specify
	- The browser then adds the padding, border and the margin.

Including the padding and border:

	- box-sizing: border-box
	- Here the width/height includes the padding and border
	- Not the margin though
		
To use this inclusive box as the default:
	
		* { box-sizing: border-box; }
		
---------------------------------------------------------------------------------------------------
Lecture 035 Understanding the Display Property
---------------------------------------------------------------------------------------------------		

The most common values for the display property is...

	block   - the element takes up the whole with, and its own row
	inline  - the element only takes up the minimum amount of space
	none    - the element is hidden, takes up no space, and is removed from the DOM

NB: To hide an element but keeps its space and its part of the DOM, use:
		visibility: hidden

But there is also a value called inline-block:
	- the element does not take up 100% horizontal space
	- you can use the box-model to modify padding, border, margin 
	
To create a nice horizontal top menu:
	- We can use an unordered list (ul)
	- We set the display property on the list items (li) to: display: inline-block

	<ul class="main-nav__items">
		<li class="main-nav__item"> <a href="packages/index.html">Packages</a> </li>
		...
		
	.main-nav__item {
			display: inline-block;
	}

BLOCK-LEVEL ELEMENTS 

- Rendered as a block and hence take up all the available horizontal space. 
- You can set margin-top and margin-bottom and two block-level elements will render in two different lines.
- Some examples are: <div> , <section> , <article> , <nav>  but also <h1> , <h2>  etc and <p> .

INLINE ELEMENTS 

- Only take up the space they require to fit their content in. 
- Two inline-elements will fit into the same line (as long as the combined content doesn't take up the entire space)
- They also use the box-model you learned about but margin-top  and margin-bottom  have no effect on the element. 
- Properties padding-top  and padding-bottom have a different effect. 
- They don't push the adjacent content away but they will do so with the element border. 
- Setting a width  or height  on an inline element also has no effect. 
- Some example elements are: <a> , <span> , <img> 
- More about this: https://hacks.mozilla.org/2015/03/understanding-inline-box-model/

INLINE BLOCK ELEMENTS

- If you want to do so or need both block-level and inline behavior, you can set display: inline-block


---------------------------------------------------------------------------------------------------
Lecture 043 Theory Time - Pseudo Classes & Pseudo Elements
---------------------------------------------------------------------------------------------------

PSEUDO CLASSES 

	Defines the style for a special state of an element:
	:class_name
	
	More: https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
	
	
PSEUDO ELEMENTS:

	Defines the style for a special part  of an element:
	::element_name

	More: https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements
	
	Example: mark up the first letter in a paragraph:
	
	p::first-letter {
			color: red;
			font-size: 20px;
	}

	Example: Add and style added content after the main content of an element:
	
	.main-nav__item a::after {
			content: " (Link)";
			color: red;
	}

---------------------------------------------------------------------------------------------------
Lecture 044 Grouping Rules
---------------------------------------------------------------------------------------------------

You can group several rules together with a comma - if the selectors should have the same style:

From:

	.main-nav__item a:hover  { color: white; }
	.main-nav__item a:active { color: white; }

To:

	.main-nav__item a:hover,
	.main-nav__item a:active 
	{
		color: white; 
	}

	
---------------------------------------------------------------------------------------------------
Lecture 046 Adding & Styling a CTA-Button
---------------------------------------------------------------------------------------------------

We want to add some extra style to the "Start hosting" link.
It's what is called a CTA link - Call to Action - a link we want to emphasize.

We will add an extra class to that element:

	<li class="main-nav__item main-nav__item--cta">
	
NB:

	The authors of the course use a method of naming classes called BEM:
	Block Element Modifyers
	
	Given our name above, main-nav__item--cta:
	main-nav = is a block    (Standalone entity that is meaningful on its own)
	__item   = is an element (A part of a block that has no standalone meaning, and is semantically tied to its block)
	--cta"   = is a modifier (A flag on a block or element. Use them to change appearance or behavior)

	More on that:
	- https://en.bem.info/methodology/
	- http://getbem.com/introduction/
	- https://css-tricks.com/bem-101/
	- https://www.smashingmagazine.com/2018/06/bem-for-beginners/
	
		
	So we add "--cta" to style a modificiation to the normal "main-nav__item" elements.

And add this extra css for that class:

	First the inactive state:
	.main-nav__item--cta a {
			color: white;
			background: #ff1b68;
			padding: 8px 16px;
			border-radius: 8px;
	}

	When hovering, we'll remove the border, and invert the colors of text and background:
	.main-nav__item--cta a:hover,
	.main-nav__item--cta a:active {
			color: #ff1b68;
			background: white;
			border: none;
	}

---------------------------------------------------------------------------------------------------
Lecture 047 Adding a Background Image to our Project
---------------------------------------------------------------------------------------------------	

We'll replace the red background with a picture for the product overview part of our webpage:

	#product-overview { 
     /*background: #ff1b68; */
     background: url("freedom.jpg");
     width: 100%;
     height: 528px;
     padding: 16px;

}

---------------------------------------------------------------------------------------------------
Lecture 049 Wrap Up
---------------------------------------------------------------------------------------------------	


Both block and inline elements conform to the box model
- With the exception that inline elements ignore margin-top and margin bottom properties.
- https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model

When you use width and height properties there are two ways to count
- content-box - the sizes you speficy make up the content measurements only
- border-box - the sizes you speficy make up content+padding+border measurements as a whole

- https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing
- https://www.w3schools.com/css/css_dimension.asp

With the diplay property with can specify an element to conform to being
- inline
- block
- inline-block  (element does not get a row of its own)
- none          (elemt removed from the documnet flow and what you see, not the DOM)

- https://developer.mozilla.org/en-US/docs/Web/CSS/display


---------------------------------------------------------------------------------------------------
SECTION 004 More on Selectors & CSS Features
---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
Lecture 052 Using Multiple CSS Classes & Combined Selectors
---------------------------------------------------------------------------------------------------	

Emphasis:

- You can use multiple classes on one element

- And if you do - and the css for those classes apply styling for the same property, 
  then the normal rules for specificity and order rule applies.

---------------------------------------------------------------------------------------------------
Lecture 053 Classes or IDs?
---------------------------------------------------------------------------------------------------	 

CSS Class Selectors
- Reusable
- Allow you to mark and name things for styling purposes only
- It's rately wrong to use a class
- Should normally be your selector of choice

CSS ID Selectors
- Only used once per page
- Also has a non-css meaning (e.g. page link): 

	<a href="#intro" class="active">Intro</a>  --->  <section id="intro" class="main-section">
	
- Can be used if already present
- Don't use them just to add some ccs styling

---------------------------------------------------------------------------------------------------
Lecture 054 (Not) using !important
---------------------------------------------------------------------------------------------------

Example:

	div {
		color: red !important;
	}
	
What does "!important" do?
- It overrides specificity and all other selectors

SO--- RARELY IF EVER USE IT!

---------------------------------------------------------------------------------------------------
Lecture 055 Selecting the Opposite with :not()
---------------------------------------------------------------------------------------------------

The :not() pseudo class:

Examples:

	/* selects any el that is not a paragraph */
	:not(p) {
		color: blue;
	}

	/* selects any anchor that is of class "active" */
	a:not(.active) {
    color: blue;
}
	
- Use this pseudo clas with caution	
- Better to use "positive" selectors than "negating".

---------------------------------------------------------------------------------------------------
Lecture 056 CSS & Browser Support
---------------------------------------------------------------------------------------------------

There is a very good web page to tell you which browsers support a certain feature of css:
- https://caniuse.com/

---------------------------------------------------------------------------------------------------
Lecture 058 Useful Resources & Links
---------------------------------------------------------------------------------------------------


A discussion on "classes vs IDs": 
https://stackoverflow.com/questions/12889362/difference-between-id-and-class-in-css-and-when-to-use-it

When is using !important  okay?
https://css-tricks.com/when-using-important-is-the-right-choice/

The :not()  pseudo class:
https://developer.mozilla.org/en-US/docs/Web/CSS/:not

Can I Use (a certain feature on a specific browser)?:
https://caniuse.com/


---------------------------------------------------------------------------------------------------
SECTION 005 Practicing the Basics
---------------------------------------------------------------------------------------------------    

---------------------------------------------------------------------------------------------------
Lecture 061 Working on the recommended plan
---------------------------------------------------------------------------------------------------

We add a class for state of the recommended plan - highlighted:
<article class="plan plan--highlighted">

And a class for the part of the plan that is the header (h1) text:
<h1 class="plan__annotation">RECOMMENDED</h1>

Then we use css to give the recommended plan..
- White text, green background, and a gray transparent drop shadow of 2px

	.plan--highlighted {
			background: #19b84c;
			color: white;
			box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.5);

	}
	
---------------------------------------------------------------------------------------------------
Lecture 062 Styling the Badge with "border-radius"
---------------------------------------------------------------------------------------------------

Finishing off the recommended header, we'll..
- make the text green
- its background white
- add more padding
- add a drop shadow

	.plan__annotation {
			background: white;
			color: #19b84c;
			padding: 8px;
			box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.5);
	}

Then we want to round off the corners on the recommended header...
- So we add -- border-radius: 8px;

	.plan__annotation {
			background: white;
			color: #19b84c;
			padding: 8px;
			box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.5);
			border-radius: 8px;
	}

---------------------------------------------------------------------------------------------------
Lecture 063 Styling our List
---------------------------------------------------------------------------------------------------

We want to remove the bullets on our list...

We add a new class to the ul elements:

	<ul class="plan__features">
	<li>1 Workspace</li>
	<li>Unlimited Traffic</li>
	<li>10GB Storage</li>
	<li>Basic Support</li>
	/ul>

We also want to give each list item some vertical space:	
	
We could then style that thus:

	.plan__features {
			list-style: none;
			padding: 0;
	}	

But in keeping with our BEM method, we'll add yet another class for those elements:

	<ul class="plan__features">
		<li class="plan__feature">5 Workspaces</li>
		<li class="plan__feature">Unlimited Traffic</li>
		<li class="plan__feature">100GB Storage</li>
		<li class="plan__feature">Plus Support</li>
	</ul>
	
And style them thus:



---------------------------------------------------------------------------------------------------
Lecture 064 Working on the Title and the Price of our Packages
---------------------------------------------------------------------------------------------------

We want to add some styling to the name and price of the plans too:

In the html:

	<article class="plan">
	<h1 class="plan__title">FREE</h1>
	<h2 class="plan__price">$0/month</h2>
	...
	
And style those thus:

	.plan__title {
			color: #0e4f1f;
	}

	.plan__price {
			color: #ddd;
	}


And for the recommended plan name and price...

	.plan--highlighted .plan__title {
			color: white;
	}

	.plan--highlighted .plan__price {
			color: #0e4f1f;
	}

---------------------------------------------------------------------------------------------------
Lecture 065 Improving our Action Button
---------------------------------------------------------------------------------------------------

Let's style the page buttons...

Let's add a class for generic buttons first:

	<div>
		<button>CHOOSE PLAN</button>
	</div>

	<div>
		<button class="button">CHOOSE PLAN</button>
	</div>

And this css:

	.button {
			background: #0e4f1f;
			color: white;
	}

The button look a bit weird though...

	- It takes some of its style from the browser defaults - which overrides inherited styling
	- Let's make sure the font is inherited from our own css stylesheet
	- And make the button text bold

	.button {
			background: #0e4f1f;
			color: white;
			font: inherit       <---- thus!
			font-weight: bold;  <---- thus!
	}

And then we override the border (which will not bee seen until we hover over it):
	border: 1.5px solid #0e4f1f;
	
And change the padding:
	padding: 8px;

So we have...

	.button {
			background: #0e4f1f;
			color: white;
			font: inherit;
			border: 2px solid #0e4f1f;
			padding: 8px;
			border-radius: 8px;
	}	
	
However, when we hove can't see it's a button you can click. Let's change that:
	cursor: pointer;
	
Also when we hover we will change the styling by reversing the colors, thus:
	
	.button:hover, .button:active {
			background: white;
			color: #0e4f1f;

	}	
	
---------------------------------------------------------------------------------------------------
Lecture 066 Understanding Outlines
---------------------------------------------------------------------------------------------------	
	
On some browsers, like chrome, we can see an outline around the button signifying the
part of the web page that has the focus. Input fields also have this quality.

On chrome we want to remove this outline for the button, which looks ugly:

The outline shown by some browsers is not part of the box model, as such, but shown
outside the border of an element, and inside the margin.

We need to use the focus pseudo selector for this:
	.button:focus {
		outline: none;
	}

---------------------------------------------------------------------------------------------------
Lecture 067 Presenting the Core Features to the User
---------------------------------------------------------------------------------------------------		

Here we add another sction to our html:

        <section>
            <h1>Many Good Reasons to Stick Around</h1>
            <ul>
                <li>
                    <div>

                    </div>
                    <p>3,857,000 Trusting Customers</p>
                </li>
                <li>
                    <div>

                    </div>
                    <p>99.999% Uptime Guarantee</p>
                </li>
                <li>
                    <div>

                    </div>
                    <p>Lightning Fast CDN</p>
                </li>
            </ul>
        </section>
        
       
---------------------------------------------------------------------------------------------------
Lecture 068 Styling the Headline of the Core Features Section
---------------------------------------------------------------------------------------------------		 

We'll style the header of this html like the header for our plans...

The good thing here is - we can reuse the section-title class:

	<h1 class="section-title">Many Good Reasons to Stick Around</h1>

	Voilá! - markup reuse!

Then let's style the boring list...

First, let's give this sdection an id - key-features - so we have...

	<section id="key-features">
	<h1 class="section-title">Many Good Reasons to Stick Around</h1>
	...
	
Let's style that:

	Background for the section:
	
	#key-features {
    background: #ff1b68;
    margin-top: 80px;
	}

	Let's make the header text white:
	
	#key-features .section-title {
			color: white;
			margin: 32px;
}

